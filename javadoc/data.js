var NAME = 'MCCore v1.58';
var AUTHORS = ['Eniripsa96'];
var DESCRIPTION = 'A library of helpful functions to speed up and simplify plugin development for all developers.';
var DEPENDS = [
];
var SOFTDEPENDS = [
];
var LOAD_BEFORE = [
];
var PACKAGES = ['com.rit.sucy.chat', 'com.rit.sucy.commands', 'com.rit.sucy.config.parse', 'com.rit.sucy.config', 'com.rit.sucy.economy', 'com.rit.sucy.enchant', 'com.rit.sucy.event', 'com.rit.sucy.gui', 'com.rit.sucy.items', 'com.rit.sucy.log', 'com.rit.sucy.mobs', 'com.rit.sucy.player', 'com.rit.sucy.reflect', 'com.rit.sucy.region', 'com.rit.sucy.scoreboard', 'com.rit.sucy.sql.direct', 'com.rit.sucy.sql', 'com.rit.sucy.text', 'com.rit.sucy.version', 'com.rit.sucy'];
var CLASSES = [
    [
        {name: 'Chat', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Main helper method for the chat resources including accessing player data and sending messages to target groups', ext: 0, impl: [], constructors: [], methods: [{name: 'clearPluginPrefixes', description: 'Clears the plugin prefix for all players <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin with the prefix'}]}, {name: 'getPlayerData', description: 'Retrieves the player with the given name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ChatData', description: 'chat data associated with the player'}, params: [{name: 'playerName', type: 'String', description: 'name of the player'}]}, {name: 'removePrefix', description: 'Removes the prefix for all players <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin with the prefix'}, {name: 'prefix', type: 'String', description: 'the text of the prefix (with or without color)'}]}, {name: 'sendMessage', description: 'Sends a message to all players within the defined cuboid <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'point', type: 'Location', description: 'the initial point'}, {name: 'width', type: 'int', description: 'width of the cuboid (x direction)'}, {name: 'height', type: 'int', description: 'height of the cuboid (y direction)'}, {name: 'depth', type: 'int', description: 'depth of the cuboid (z direction)'}, {name: 'message', type: 'String', description: 'message to be sent'}]}, {name: 'sendMessage', description: 'Sends a message to all players within the defined sphere or cylinder <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'center', type: 'Location', description: 'the center of the region'}, {name: 'radius', type: 'int', description: 'radius of the sphere/cylinder'}, {name: 'sphere', type: 'boolean', description: 'sphere if true, cylinder if false (cylinder contains all y within the defined circle)'}, {name: 'message', type: 'String', description: ''}]}, {name: 'sendMessage', description: 'Sends a message to all players within the defined cuboid <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'point1', type: 'Location', description: 'the first point'}, {name: 'point2', type: 'Location', description: 'the second point'}, {name: 'message', type: 'String', description: 'the message to be sent'}]}, {name: 'sendMessage', description: 'Sends a message to all players with the given permission <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'permission', type: 'String', description: 'permission required to get the message'}, {name: 'message', type: 'String', description: 'message to send'}]}, {name: 'unlockPrefix', description: 'Unlocks the prefix for all players <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'prefix', type: 'Prefix', description: 'the prefix to unlock'}, {name: 'apply', type: 'boolean', description: 'whether or not to automatically apply it'}]}], fields: [{name: 'Chat', description: 'Main helper method for the chat resources including accessing player data and sending messages to target groups', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ChatCommander', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Controls commands for the chat API', ext: 'CommandHandler', impl: [], constructors: [{name: 'ChatCommander', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}]}], methods: [{name: 'displayUsage', description: 'Displays the usage for chat commands <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}]}, {name: 'registerCommands', description: 'Registers the sub-commands', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'ChatCommander', description: 'Controls commands for the chat API', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ChatData', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Contains player data for the chat', ext: 0, impl: ['ISavable'], constructors: [], methods: [{name: 'clearPluginPrefix', description: 'Clears the prefix assigned to the plugin with the given name <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin with the prefix'}]}, {name: 'getChatTag', description: 'Retrieves the player\'s chat tag (e.g. <[Prefix] DisplayName>) <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the player\'s chat tag'}, params: []}, {name: 'getDisplayName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'player display name'}, params: []}, {name: 'getPrefix', description: 'Retrieves the current prefix used by the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Prefix', description: 'prefix chosen by player or null if none are applied'}, params: []}, {name: 'getPrefix', description: 'Retrieves the current prefix for the given plugin <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Prefix', description: 'prefix currently assigned by the plugin'}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin'}]}, {name: 'getUnlockedPrefixes', description: 'Retrieves a list of all prefixes unlocked through a plugin <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Prefix>', description: 'list of all unlocked prefixes from the plugin'}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin that gives the prefixes'}]}, {name: 'hasPrefix', description: 'Checks if the prefix has been obtained for the given plugin <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the prefix is unlocked'}, params: [{name: 'prefixText', type: 'String', description: 'the text of the prefix (with or without color)'}]}, {name: 'removePrefix', description: 'Removes the prefix from the player, making them unable to use it anymore <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if removed, false if it wasn\'t unlocked'}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin that gives the prefix'}, {name: 'prefixText', type: 'String', description: 'prefix text (with or without color)'}]}, {name: 'removePrefixes', description: 'Removes all prefixes unlocked through the given plugin <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin with the prefixes'}]}, {name: 'save', description: 'Saves the player data to the config file', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'ConfigurationSection', description: ''}, {name: 'base', type: 'String', description: ''}]}, {name: 'setDisplayName', description: 'Sets the player\'s display name <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'displayName', type: 'String', description: 'display name'}]}, {name: 'setPluginPrefix', description: 'Sets the prefix for a plugin Use this only for game-changing prefixes. If it doesn\'t need to be displayed, use unlockPrefix(CPrefix, boolean) instead. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'prefix', type: 'Prefix', description: 'prefix data'}]}, {name: 'unlockPrefix', description: 'Unlocks the given prefix <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successful, false if already unlocked'}, params: [{name: 'prefix', type: 'Prefix', description: 'prefix to unlock'}, {name: 'apply', type: 'boolean', description: 'whether or not to apply it right away'}]}], fields: [{name: 'ChatData', description: 'Contains player data for the chat', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ChatListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Listens for players joining/quitting to load and clear data appropriately', ext: 0, impl: ['Listener'], constructors: [{name: 'ChatListener', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'MCCore', description: 'plugin hosting this listener'}]}], methods: [{name: 'onJoin', description: 'Loads player data when they join <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerJoinEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Clears player data when they quit <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}], fields: [{name: 'ChatListener', description: 'Listens for players joining/quitting to load and clear data appropriately', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Prefix', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Unlockable Prefix Data', ext: 0, impl: [], constructors: [{name: 'Prefix', description: 'Constructor for prefixes with colored square braces <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin that gives the prefix'}, {name: 'prefix', type: 'String', description: 'prefix text (with colors)'}, {name: 'braceColor', type: 'ChatColor', description: 'color of the braces containing the prefix'}]}, {name: 'Prefix', description: 'Constructor for prefixes with white square braces <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'pluginName', type: 'String', description: 'name of the plugin that gives the prefix'}, {name: 'prefix', type: 'String', description: 'prefix text (with colors)'}]}], methods: [{name: 'pluginName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the name of the plugin that gives this prefix'}, params: []}, {name: 'tag', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'tag for the prefix'}, params: []}, {name: 'text', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the text of the prefix including colors'}, params: []}, {name: 'textWithoutColor', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the text of the prefix without colors'}, params: []}, {name: 'toString', description: 'Represents the prefix as a string for config saving <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'prefix data represented as a string'}, params: []}], fields: [{name: 'Prefix', description: 'Unlockable Prefix Data', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'CommandHandler', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'Manages organizing commands into sub-commands', ext: 0, impl: ['CommandExecutor'], constructors: [{name: 'CommandHandler', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'command', type: 'String', description: 'command label and usage title'}]}, {name: 'CommandHandler', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'title', type: 'String', description: 'usage title'}, {name: 'command', type: 'String', description: 'command label'}]}], methods: [{name: 'canUseCommand', description: 'Checks whether or not a command sender can use a certain command - Can be overridden for custom checks - <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'boolean', description: 'true if able to use it, false otherwise'}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'command', type: 'ICommand', description: 'command to check'}]}, {name: 'displayUsage', description: 'Displays the command usage - If you want custom displays, override the method with the page argument - <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}]}, {name: 'displayUsage', description: 'Displays the command usage Can be overridden for custom displays <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'page', type: 'int', description: 'page number'}]}, {name: 'getLabel', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'command label'}, params: []}, {name: 'getPlugin', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Plugin', description: 'plugin reference'}, params: []}, {name: 'onCommand', description: 'Called on a command <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true'}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'cmd', type: 'Command', description: 'command executed'}, {name: 'label', type: 'String', description: 'command label'}, {name: 'args', type: 'String[]', description: 'command arguments'}]}, {name: 'registerCommand', description: 'Registers a new sub-command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'String', description: 'command prefix'}, {name: 'executor', type: 'ICommand', description: 'handler for the command'}]}, {name: 'registerCommands', description: 'Registers all sub-commands', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'protected', returnValue: {type: 'void', description: ''}, params: []}, {name: 'trimArgs', description: 'Trims the first element off of args <br><br><br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'String[]', description: 'trimmed args'}, params: [{name: 'args', type: 'String[]', description: 'initial args'}]}], fields: [{name: 'BREAK', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'protected'}, {name: 'CommandHandler', description: 'Manages organizing commands into sub-commands', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'commands', description: 'Table of registered sub-commands', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'Map<String,ICommand>', scope: 'protected'}, {name: 'label', description: 'Command label', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'String', scope: 'protected'}, {name: 'plugin', description: 'Plugin reference', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'Plugin', scope: 'protected'}, {name: 'title', description: 'Usage title', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'String', scope: 'protected'}], scope: 'public'},
        {name: 'CommandListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Listener for cleaning up configurable commands automatically for other plugins when they are disabled.</p>', ext: 0, impl: ['Listener'], constructors: [{name: 'CommandListener', description: 'Creates the listener for configurable commands <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'MCCore', description: 'plugin reference'}]}], methods: [{name: 'onCommand', description: 'Handles server commands <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'ServerCommandEvent', description: 'event details'}]}, {name: 'onCommand', description: 'Handles player commands <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerCommandPreprocessEvent', description: 'event details'}]}, {name: 'onDisable', description: '<p>Unregisters commands for plugins when they are disabled</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PluginDisableEvent', description: 'event details'}]}], fields: [{name: 'CommandListener', description: '<p>Listener for cleaning up configurable commands automatically for other plugins when they are disabled.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CommandLog', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'MCCore com.rit.sucy.commands.CommandLog <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 0, impl: ['CommandSender'], constructors: [], methods: [{name: 'addAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PermissionAttachment', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: ''}]}, {name: 'addAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PermissionAttachment', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: ''}, {name: 's', type: 'String', description: ''}, {name: 'b', type: 'boolean', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'addAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PermissionAttachment', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: ''}, {name: 's', type: 'String', description: ''}, {name: 'b', type: 'boolean', description: ''}]}, {name: 'addAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PermissionAttachment', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: ''}, {name: 'i', type: 'int', description: ''}]}, {name: 'getEffectivePermissions', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Set<PermissionAttachmentInfo>', description: ''}, params: []}, {name: 'getName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}, {name: 'getServer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Server', description: ''}, params: []}, {name: 'hasPermission', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'permission', type: 'Permission', description: ''}]}, {name: 'hasPermission', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'isOp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'isPermissionSet', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'isPermissionSet', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'permission', type: 'Permission', description: ''}]}, {name: 'recalculatePermissions', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'removeAttachment', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'permissionAttachment', type: 'PermissionAttachment', description: ''}]}, {name: 'sendMessage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'strings', type: 'String[]', description: ''}]}, {name: 'sendMessage', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 's', type: 'String', description: ''}]}, {name: 'setOp', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'b', type: 'boolean', description: ''}]}], fields: [{name: 'callback', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'LogFunction', scope: 'public'}, {name: 'CommandLog', description: 'MCCore com.rit.sucy.commands.CommandLog <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CommandManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>The handler for configurable commands</p> <p>Only configurable commands registered using this class will function.</p> <p>It is recommended that you use "ConfigurableCommand" instead as it provides a more flexible structure for your commands and makes them automatically configurable as well.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'displayUsage', description: '<p>Displays the usage help for the command, showing only the commands that the sender can use.</p> <p/> <p>The usage display adjusts to the sender, having different spacing for players and the console.</p> <p/> <p>When on 1.7.9+, players also can see buttons to navigate through the help menu as long as it is included in the format.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'c', type: 'ConfigurableCommand', description: 'command to show usage for'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}]}, {name: 'displayUsage', description: '<p>Displays the usage help for the command, showing only the commands that the sender can use.</p> <p/> <p>The usage display adjusts to the sender, having different spacing for players and the console.</p> <p/> <p>When on 1.7.9+, players also can see buttons to navigate through the help menu as long as it is included in the format.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'c', type: 'ConfigurableCommand', description: 'command to show usage for'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'page', type: 'int', description: 'page to display'}]}, {name: 'getCommand', description: '<p>Retrieves a registered command by name</p> <p>If there is no registered command with the name, this will return null instead.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ConfigurableCommand', description: 'registered command or null if not found'}, params: [{name: 'name', type: 'String', description: 'command name'}]}, {name: 'getConfig', description: '<p>Retrieves the command configuration for the plugin</p> <p>If a configuration for the plugin hasn\'t yet been set up, this will create one.</p> <p>This is primarily for the commands saving/loading their own data and generally doesn\'t need to be used.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'CommentedConfig', description: 'command configuration'}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin to get the config for'}]}, {name: 'getDescriptionReplacement', description: '<p>Retrieves the replacement for descriptions when they are not set</p> <p>This is used by the API for the command usage. You generally will not need to use this.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'description replacement'}, params: []}, {name: 'isInvalidRegistration', description: '<p>Checks whether or not the CommandManager was able to register commands successfully with Bukkit. If it is invalid, then commands will be handled by MCCore instead of the default command system.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if commands could not be registered, false otherwise'}, params: []}, {name: 'loadOptions', description: '<p>Loads options for displaying command usages from the configuration</p> <p>This is called by MCCore automatically and doesn\'t need to be called by you. If you want to override MCCore\'s default configuration, you could use this method to apply a different one as long as it uses the same format.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'DataSection', description: 'configuration to load from'}]}, {name: 'registerCommand', description: '<p>Registers a new ConfigurableCommand for the plugin</p> <p>Sub commands do not need to be registered as they are linked to the root commands.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'command to register'}]}, {name: 'trimArgs', description: '<p>Trims the first element off of an args array</p> <p>This is used by the API to handle command execution. You generally will not need to use this.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String[]', description: 'trimmed args'}, params: [{name: 'args', type: 'String[]', description: 'initial args'}]}, {name: 'unregisterAll', description: '<p>Unregisters all commands for all plugins</p> <p>If no commands were registered, this does nothing</p> <p/> <p>You shouldn\'t use this method as it\'s meant for MCCore to clear the data when it\'s disabled.</p>', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'unregisterCommand', description: '<p>Unregisters a command</p> <p>If the command wasn\'t registered, this does nothing</p> <p/> <p>Commands are automatically unregistered when your plugin is disabled, so you generally do not need to manually unregister your commands. This would be more for if you want to unregister a command during run time such as if a command was disabled via a command</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'command to unregister'}]}, {name: 'unregisterCommands', description: '<p>Unregisters all of the commands registered by a plugin</p> <p>If the plugin didn\'t have any registered commands, this does nothing</p> <p/> <p>Commands are automatically unregistered when your plugin is disabled, so you generally do not need to manually unregister your commands. This would be more for if you want to unregister commands during run time such as if the commands were disabled via a command</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin to unregister for'}]}], fields: [{name: 'CommandManager', description: '<p>The handler for configurable commands</p> <p>Only configurable commands registered using this class will function.</p> <p>It is recommended that you use "ConfigurableCommand" instead as it provides a more flexible structure for your commands and makes them automatically configurable as well.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ConfigurableCommand', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A command that is able to be modified via configuration</p> <p/> <p>To set up hierarchies of commands, simply start with your root command, then create your sub commands, adding each to the root.</p> <p/> <p>Example:</p> <code> <p/>  ConfigurableCommand root = new ConfigurableCommand(this, "root", SenderType.ANYONE);<br/> ConfigurableCommand group;<br/> <br/>  root.addSubCommands(<br/> &nbsp;&nbsp;&nbsp;&nbsp;new ConfigurableCommand(this, "list", SenderType.ANYONE, new ListFunction(), "Lists available things", "", "perm.list"),<br/> &nbsp;&nbsp;&nbsp;&nbsp;group = new ConfigurableCommand(this, "group", SenderType.ANYONE, "Handles group functions")<br/> );<br/> group.addSubCommands(<br/> &nbsp;&nbsp;&nbsp;&nbsp;new ConfigurableCommand(this, "add", SenderType.ANYONE, new AddFunction(), "Adds a member to a group", "<player>", "perm.add"),<br/> &nbsp;&nbsp;&nbsp;&nbsp;new ConfigurableCommand(this, "remove", SenderType.ANYONE, new RemoveFunction(), "Removes a member from a group", "<player>", "perm.remove")<br/> );<br/> <br/>  CommandManager.registerCommand(root); <p/> </code>', ext: 'Command', impl: [], constructors: [{name: 'ConfigurableCommand', description: '<p>Creates a new command that performs its own action when run but cannot have sub commands.</p> <p/> <p>The key is used to tell commands apart and is also the default name of the command.</p> <p/> <p>The command created by this has no default arguments or required permission. They must be set via the configuration.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'key', type: 'String', description: 'command key'}, {name: 'senderType', type: 'SenderType', description: 'type of sender needed for the command'}, {name: 'function', type: 'IFunction', description: 'command executor'}, {name: 'description', type: 'String', description: 'default description'}]}, {name: 'ConfigurableCommand', description: '<p>Creates a new command that performs its own action when run but cannot have sub commands.</p> <p/> <p>The key is used to tell commands apart and is also the default name of the command.</p> <p/> <p>The command created by this has no default required permission. It must be set via the configuration.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'key', type: 'String', description: 'command key'}, {name: 'senderType', type: 'SenderType', description: 'type of sender needed for the command'}, {name: 'function', type: 'IFunction', description: 'command executor'}, {name: 'description', type: 'String', description: 'default description'}, {name: 'args', type: 'String', description: 'default arguments'}]}, {name: 'ConfigurableCommand', description: '<p>Creates a new command that performs its own action when run but cannot have sub commands.</p> <p/> <p>The key is used to tell commands apart and is also the default name of the command.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'key', type: 'String', description: 'command key'}, {name: 'senderType', type: 'SenderType', description: 'type of sender needed for the command'}, {name: 'function', type: 'IFunction', description: 'command executor'}, {name: 'description', type: 'String', description: 'default description'}, {name: 'args', type: 'String', description: 'default arguments'}, {name: 'permission', type: 'String', description: 'default required permission'}]}, {name: 'ConfigurableCommand', description: '<p>Creates a new command that can only hold other commands and displays a command usage for sub commands when executed.</p> <p/> <p>The key is used to tell commands apart and is also the default name of the command.</p> <p/> <p>The command created by this has no default description. It must be set via the configuration.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'key', type: 'String', description: 'command key'}, {name: 'senderType', type: 'SenderType', description: 'type of sender needed for the command'}]}, {name: 'ConfigurableCommand', description: '<p>Creates a new command that can only hold other commands and displays a command usage for sub commands when executed.</p> <p/> <p>The key is used to tell commands apart and is also the default name of the command.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'key', type: 'String', description: 'command key'}, {name: 'senderType', type: 'SenderType', description: 'type of sender needed for the command'}, {name: 'description', type: 'String', description: 'default description'}]}, {name: 'ConfigurableCommand', description: '<p>Creates a new command that performs its own action when run but cannot have sub commands.</p> <p/> <p>The key is used to tell commands apart and is also the default name of the command.</p> <p/> <p>The command created by this has no default description, arguments, or required permission. They must be set via the configuration.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'key', type: 'String', description: 'command key'}, {name: 'senderType', type: 'SenderType', description: 'type of sender needed for the command'}, {name: 'function', type: 'IFunction', description: 'command executor'}]}], methods: [{name: 'addSubCommand', description: '<p>Adds a sub command to this command</p> <p>The sub command cannot be a registered command</p> <p>You cannot register a command if this command is attached to a function</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'sub command to add'}]}, {name: 'addSubCommands', description: '<p>Adds multiple sub commands to this command</p> <p>The sub commands cannot be a registered command</p> <p>You cannot register a command if this command is attached to a function</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'commands', type: 'ConfigurableCommand...', description: 'sub commands to add'}]}, {name: 'canUseCommand', description: '<p>Checks whether or not the sender can use this command</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can use, false otherwise'}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}]}, {name: 'displayHelp', description: '<p>Displays the help for this command according to the arguments</p> <p>The displayed page is determined by the provided arguments</p> <p>If this is a function command, this will display the usage for this command including the arguments.</p> <p>If this is a command that contains others, this will display the list of sub commands and their descriptions.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments provided by the sender'}]}, {name: 'displayHelp', description: '<p>Displays the help for this command</p> <p>This displays the first page of the usage</p> <p>If this is a function command, this will display the usage for this command including the arguments.</p> <p>If this is a command that contains others, this will display the list of sub commands and their descriptions.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}]}, {name: 'displayHelp', description: '<p>Displays the help for this command using the given page</p> <p>If the page is less than one, the first page will be displayed</p> <p>If the page is greater than the number of pages, the last page will be displayed</p> <p>If this is a function command, this will display the usage for this command including the arguments.</p> <p>If this is a command that contains others, this will display the list of sub commands and their descriptions.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'page', type: 'int', description: 'page number'}]}, {name: 'execute', description: '<p>Executes the command using the provided arguments</p> <p>Root commands will pass the arguments onto sub commands or display the command usage if the args don\'t match any sub commands.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'arguments provided by the sender'}]}, {name: 'execute', description: '<p>Bukkit executiton of the command.</p> <p>Use execute(CommandSender, String[]) instead.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true'}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'label', type: 'String', description: 'label of the command'}, {name: 'args', type: 'String[]', description: 'arguments provided by the sender'}]}, {name: 'getArgs', description: '<p>Retrieves the described arguments for this command</p> <p>If this doesn\'t have any arguments described, this returns null</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'required permission or null if none'}, params: []}, {name: 'getDescription', description: '<p>Retrieves the description for this command</p> <p>If this doesn\'t have a description, this returns null</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'required permission or null if none'}, params: []}, {name: 'getMessage', description: 'Retrieves a message for the command, using the default and adding it to the configuration if not already set. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the message from the config or default message if not set'}, params: [{name: 'key', type: 'String', description: 'the message key'}, {name: 'defaultMessage', type: 'String', description: 'the message to use if not set'}, {name: 'filters', type: 'CustomFilter...', description: 'filters to use on the message'}]}, {name: 'getName', description: '<p>Retrieves the name of the command</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'command name'}, params: []}, {name: 'getParent', description: '<p>Retrieves the parent of the command.</p> <p>If this does not have a parent, this will return null.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ConfigurableCommand', description: 'parent of the command'}, params: []}, {name: 'getPermission', description: '<p>Retrieves the permission required to use this command</p> <p>If this doesn\'t require a permission, this returns null</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'required permission or null if none'}, params: []}, {name: 'getPlugin', description: '<p>Retrieves the plugin that owns this command</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'JavaPlugin', description: 'owning plugin'}, params: []}, {name: 'getSenderType', description: '<p>Retrieves the type of sender required to use this command</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SenderType', description: 'required sender type'}, params: []}, {name: 'getSubCommand', description: '<p>Retrieves a sub command by name</p> <p>If there are no sub commands with the given name, this will return null instead</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ConfigurableCommand', description: 'sub command or null if not found'}, params: [{name: 'name', type: 'String', description: 'sub command name'}]}, {name: 'getUsableCommands', description: '<p>Retrieves the list of commands that are usable by the sender</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'list of usable commands'}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}]}, {name: 'hasArguments', description: '<p>Checks whether or not this command has described arguments</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if it has described arguments, false otherwise'}, params: []}, {name: 'hasDescription', description: '<p>Checks whether or not this command has a description</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has a description, false otherwise'}, params: []}, {name: 'hasParent', description: '<p>Checks whether or not the command has a parent command.</p> <p>This command will have a parent if it was added as a sub command to another command</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has a parent, false otherwise'}, params: []}, {name: 'hasSubCommand', description: '<p>Checks whether or not this command has the given sub command</p> <p>This is not case-sensitive</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has the sub command, false otherwise'}, params: [{name: 'name', type: 'String', description: 'sub command name'}]}, {name: 'isContainer', description: '<p>Checks whether or not this command is a container command.</p> <p>A container command is one that doesn\'t have a function of its own but contains other commands that have functions.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if a container command, false otherwise'}, params: []}, {name: 'isFunction', description: '<p>Checks whether or not this command is a functional command.</p> <p>A functional command performs a task when executed and cannot hold other commands in it.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if functional command, false otherwise'}, params: []}, {name: 'isRootCommand', description: '<p>Checks whether or not this is a root command</p> <p>A "root" command would be a command with no parent command</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if root command, false otherwise'}, params: []}, {name: 'markAsRegistered', description: '<p>Marks the command as registered so that it cannot be added to other commands.</p> <p>This is called on commands as they are registered through the CommandManager class. You do not need to use this method.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'requiresPermission', description: '<p>Checks whether or not this command requires a permission</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if requires a permission, false otherwise'}, params: []}, {name: 'sendMessage', description: 'Sends a command message to the sender if the message is not an empty string. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'key', type: 'String', description: 'the message key'}, {name: 'defaultMessage', type: 'String', description: 'the message to use if not set'}, {name: 'filters', type: 'CustomFilter...', description: 'filters to use on the message'}]}, {name: 'toString', description: '<p>Returns a string of the command name</p> <p>If this is a sub command, this returns the parent\'s name as well as the name of this command.</p> <p>For example, if this is the command "add" and is the sub command of "group", this will return "group add"</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'command path'}, params: []}], fields: [{name: 'ConfigurableCommand', description: '<p>A command that is able to be modified via configuration</p> <p/> <p>To set up hierarchies of commands, simply start with your root command, then create your sub commands, adding each to the root.</p> <p/> <p>Example:</p> <code> <p/>  ConfigurableCommand root = new ConfigurableCommand(this, "root", SenderType.ANYONE);<br/> ConfigurableCommand group;<br/> <br/>  root.addSubCommands(<br/> &nbsp;&nbsp;&nbsp;&nbsp;new ConfigurableCommand(this, "list", SenderType.ANYONE, new ListFunction(), "Lists available things", "", "perm.list"),<br/> &nbsp;&nbsp;&nbsp;&nbsp;group = new ConfigurableCommand(this, "group", SenderType.ANYONE, "Handles group functions")<br/> );<br/> group.addSubCommands(<br/> &nbsp;&nbsp;&nbsp;&nbsp;new ConfigurableCommand(this, "add", SenderType.ANYONE, new AddFunction(), "Adds a member to a group", "<player>", "perm.add"),<br/> &nbsp;&nbsp;&nbsp;&nbsp;new ConfigurableCommand(this, "remove", SenderType.ANYONE, new RemoveFunction(), "Removes a member from a group", "<player>", "perm.remove")<br/> );<br/> <br/>  CommandManager.registerCommand(root); <p/> </code>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'DataArray', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents a section of a config', ext: 0, impl: [], constructors: [], methods: [{name: 'add', description: 'Adds a value to the array <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'value', type: 'Object', description: 'value to add'}]}, {name: 'asDataList', description: 'Gets the array as a data section list <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<DataSection>', description: 'data list representation'}, params: []}, {name: 'asStringList', description: 'Gets the array as a string list <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'string list representation'}, params: []}, {name: 'clear', description: 'Clears all data and comments from the data section', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'get', description: 'Fetches a value using an index <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'fetched value'}, params: [{name: 'index', type: 'int', description: 'index to use'}]}, {name: 'size', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of key/value pairs'}, params: []}, {name: 'values', description: 'Retrieves the values contained in the keys for this section <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<Object>', description: 'values contained in the keys for this section'}, params: []}], fields: [{name: 'DataArray', description: 'Represents a section of a config', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DataSection', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents a section of a config', ext: 0, impl: [], constructors: [], methods: [{name: 'addComment', description: 'Adds a comment in front of the value with the key <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key of the value the comment is in front of'}, {name: 'comment', type: 'String', description: 'comment to add'}]}, {name: 'applyDefaults', description: 'Applies defaults to this data section <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'defaults', type: 'DataSection', description: 'defaults to apply'}]}, {name: 'checkDefault', description: 'Checks for a default value in the data. If the value is not there, the provided default value will be applied. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key of the default value'}, {name: 'defaultValue', type: 'Object', description: 'value to apply if no value is present'}]}, {name: 'clear', description: 'Clears all data and comments from the data section', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'clearAllComments', description: 'Clears all comments <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'deep', type: 'boolean', description: 'true if to clear comments in all child sections as well'}]}, {name: 'clearComments', description: 'Clears the comments for the given node <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key of the node to clear for'}]}, {name: 'createSection', description: 'Creates a new data section at the given key <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'the created section'}, params: [{name: 'key', type: 'String', description: 'key to create the section at'}]}, {name: 'defaultSection', description: 'Checks for a data section at the given key. If it is not a section, a new one will be created and returned. Otherwise, the existing section will be returned. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'current section at the key, new or existing'}, params: [{name: 'key', type: 'String', description: 'key to check for a section at'}]}, {name: 'dump', description: 'Dumps the data contents to a file at the given path <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'path', type: 'String', description: 'path to the file'}]}, {name: 'dump', description: 'Dumps the data contents to a file to the given file <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'file', type: 'File', description: 'file to dump to'}]}, {name: 'dump', description: 'Dumps the data contents into the stream <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'write', type: 'BufferedWriter', description: 'stream to dump to'}]}, {name: 'entrySet', description: 'Retrieves the set of entries in this data section <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Set<Map.Entry<String,Object>>', description: 'entry set of the data section'}, params: []}, {name: 'get', description: 'Retrieves a generic value at the given key <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'the value at the given key or fallback if not found'}, params: [{name: 'key', type: 'String', description: 'key to get the value for'}, {name: 'fallback', type: 'Object', description: 'value to return if not found'}]}, {name: 'get', description: 'Retrieves a generic value at the given key <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'the value at the given key'}, params: [{name: 'key', type: 'String', description: 'key to get the value for'}]}, {name: 'getBoolean', description: 'Retrieves a boolean value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'the boolean value from the config or false if not found'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'getBoolean', description: 'Retrieves a boolean value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'the boolean value from the config or fallback if not found'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'boolean', description: 'value to return if not found'}]}, {name: 'getByte', description: 'Retrieves a byte value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'byte', description: 'the byte value or fallback if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'byte', description: 'value to return if not found'}]}, {name: 'getByte', description: 'Retrieves a byte value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'byte', description: 'the byte value or 0 if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'getChar', description: 'Retrieves a character value from the data. If more than one characters are found, this will only return the first. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'char', description: 'the character from the config or \'\0\' if not found'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'getChar', description: 'Retrieves a character value from the data. If more than one characters are found, this will only return the first. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'char', description: 'the character from the config or fallback if not found'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'char', description: 'value to return if not found'}]}, {name: 'getComments', description: 'Gets the comments for a data value <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'list of comments'}, params: [{name: 'key', type: 'String', description: 'data key'}]}, {name: 'getDouble', description: 'Retrieves a double value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'the double value or fallback if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'getDouble', description: 'Retrieves a double value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'the double value or fallback if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'double', description: 'value to return if not found'}]}, {name: 'getFloat', description: 'Retrieves a float value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'float', description: 'the float value or fallback if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'float', description: 'value to return if not found'}]}, {name: 'getFloat', description: 'Retrieves a float value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'float', description: 'the float value or 0 if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'getInt', description: 'Retrieves an integer value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the integer value or fallback if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'int', description: 'value to return if not found'}]}, {name: 'getInt', description: 'Retrieves an integer value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'the integer value or 0 if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'getList', description: 'Retrieves a string list value from the config <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'the list value or an empty list if not found'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'getList', description: 'Retrieves a string list value from the config <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'the list value or fallback if not found'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'List<String>', description: 'value to return if not found'}]}, {name: 'getSection', description: 'Retrieves a data section from the given location <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'found section or null if not found'}, params: [{name: 'key', type: 'String', description: 'key of the section to retrieve'}]}, {name: 'getShort', description: 'Retrieves a short value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'short', description: 'the short value or fallback if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'short', description: 'value to return if not found'}]}, {name: 'getShort', description: 'Retrieves a short value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'short', description: 'the short value or 0 if not found or not a number'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'getString', description: 'Retrieves a string value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the string value from the config or fallback if not found'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}, {name: 'fallback', type: 'String', description: 'value to return if not found'}]}, {name: 'getString', description: 'Retrieves a string value from the data <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the string value from the config or null if not found'}, params: [{name: 'key', type: 'String', description: 'key of the value to retrieve'}]}, {name: 'has', description: 'Checks whether or not the data contains a value at the given key <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if contains a value, false otherwise'}, params: [{name: 'key', type: 'String', description: 'key to check'}]}, {name: 'hasComment', description: 'Checks whether or not the data has a comment for it <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has comments'}, params: [{name: 'key', type: 'String', description: 'data key'}]}, {name: 'isList', description: 'Checks whether or not the data contains a list value at the given key <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if a list value is set at the key, false otherwise'}, params: [{name: 'key', type: 'String', description: 'key to check for a list value at'}]}, {name: 'isNumber', description: 'Checks whether or not the value at the key is a number <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if a number is at the key, false otherwise'}, params: [{name: 'key', type: 'String', description: 'key to check for a number value at'}]}, {name: 'isSection', description: 'Checks whether or not the value at the given key is a data section <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if DataSection, false otherwise'}, params: [{name: 'key', type: 'String', description: 'key of the value'}]}, {name: 'keys', description: 'Retrieves the keys within the section <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'keys in the data section'}, params: []}, {name: 'remove', description: 'Removes a value at the given key along with its comments. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'the removed value or null of no value was present'}, params: [{name: 'key', type: 'String', description: 'key to remove a value for'}]}, {name: 'set', description: 'Sets a value to the config <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key to represent the value'}, {name: 'value', type: 'Object', description: 'value to set'}]}, {name: 'setComments', description: 'Sets the comments to have above the specified node <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: ''}, {name: 'comments', type: 'List<String>', description: 'comments above a given node'}]}, {name: 'size', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'number of key/value pairs'}, params: []}, {name: 'toString', description: 'Returns the YAML string for the config data <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'YAML data string'}, params: []}, {name: 'toString', description: 'Returns the YAML string for the config data <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'YAML data string'}, params: [{name: 'quote', type: 'char', description: 'the character to wrap strings in'}]}, {name: 'trim', description: 'Trims the data, only keeping what is also in the default section <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'defaults', type: 'DataSection', description: 'default section to trim to'}]}, {name: 'values', description: 'Retrieves the values contained in the keys for this section <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Collection<Object>', description: 'values contained in the keys for this section'}, params: []}], fields: [{name: 'DataSection', description: 'Represents a section of a config', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'JSONParser', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Custom parser for JSON that doesn\'t trim whitespace or newlines as it is meant for storing data, not for super readable files.', ext: 0, impl: [], constructors: [], methods: [{name: 'dump', description: 'Dumps config data to a string in JSON format <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'DataSection', description: 'data to dump'}, {name: 'builder', type: 'StringBuilder', description: 'string builder to use'}]}, {name: 'parseFile', description: 'Reads and then parses data from the file. If the file does not exist or doesn\'t contain any data, this will return an empty DataSection object. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'loaded data'}, params: [{name: 'file', type: 'File', description: 'the file load from'}]}, {name: 'parseFile', description: 'Reads and then parses data from the file at the given path. If the file does not exist or doesn\'t contain any data, this will return an empty DataSection object. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'loaded data'}, params: [{name: 'path', type: 'String', description: 'path to the file load from'}]}, {name: 'parseResource', description: 'Reads and then parses data from an embedded plugin resource. If the resource does not exist or doesn\'t contain any data, this will return an empty DataSection object. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'loaded data'}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin containing the embedded resource'}, {name: 'path', type: 'String', description: 'path to the resource (not including the beginning slash)'}]}, {name: 'parseText', description: 'Parses the text read in from a file. If a null string is passed in, this will return an empty data section. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'parsed data'}, params: [{name: 'text', type: 'String', description: 'text to parse'}]}, {name: 'save', description: 'Saves config data to a file <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'DataSection', description: ''}, {name: 'path', type: 'String', description: 'path to the file'}]}, {name: 'save', description: 'Dumps the data contents into the stream <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'DataSection', description: ''}, {name: 'write', type: 'BufferedWriter', description: 'stream to dump to'}]}, {name: 'save', description: 'Dumps the data contents to a file to the given file <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'DataSection', description: ''}, {name: 'file', type: 'File', description: 'file to dump to'}]}], fields: [{name: 'JSONParser', description: 'Custom parser for JSON that doesn\'t trim whitespace or newlines as it is meant for storing data, not for super readable files.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'NumberParser', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles number parsing for various locales', ext: 0, impl: [], constructors: [], methods: [{name: 'parseDouble', description: 'Parses a double value from a string <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'double value'}, params: [{name: 'value', type: 'String', description: 'string to parse'}]}, {name: 'parseInt', description: 'Parses an integer value from a string <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'integer value'}, params: [{name: 'value', type: 'String', description: 'string to parse'}]}], fields: [{name: 'NumberParser', description: 'Handles number parsing for various locales', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'YAMLParser', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Custom parser for YAML that preserves comments with the key they preceed', ext: 0, impl: [], constructors: [], methods: [{name: 'dump', description: 'Dumps config data to a string in YAML format <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'DataSection', description: 'data to dump'}, {name: 'builder', type: 'StringBuilder', description: 'string builder to use'}, {name: 'indent', type: 'int', description: 'starting indent'}, {name: 'quote', type: 'char', description: 'character to use for containing strings'}]}, {name: 'parseFile', description: 'Reads and then parses data from the file. If the file does not exist or doesn\'t contain any data, this will return an empty DataSection object. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'loaded data'}, params: [{name: 'file', type: 'File', description: 'the file load from'}]}, {name: 'parseFile', description: 'Reads and then parses data from the file at the given path. If the file does not exist or doesn\'t contain any data, this will return an empty DataSection object. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'loaded data'}, params: [{name: 'path', type: 'String', description: 'path to the file load from'}]}, {name: 'parseResource', description: 'Reads and then parses data from an embedded plugin resource. If the resource does not exist or doesn\'t contain any data, this will return an empty DataSection object. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'loaded data'}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin containing the embedded resource'}, {name: 'path', type: 'String', description: 'path to the resource (not including the beginning slash)'}]}, {name: 'parseText', description: 'Parses the text read in from a file. If a null string is passed in, this will return an empty data section. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'parsed data'}, params: [{name: 'text', type: 'String', description: 'text to parse'}, {name: 'quote', type: 'char', description: 'character strings are wrapped in'}]}, {name: 'parseText', description: 'Parses the text read in from a file. If a null string is passed in, this will return an empty data section. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'parsed data'}, params: [{name: 'text', type: 'String', description: 'text to parse'}]}, {name: 'save', description: 'Dumps the data contents to a file to the given file <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'DataSection', description: ''}, {name: 'file', type: 'File', description: 'file to dump to'}]}, {name: 'save', description: 'Dumps the data contents into the stream <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'DataSection', description: ''}, {name: 'write', type: 'BufferedWriter', description: 'stream to dump to'}]}, {name: 'save', description: 'Saves config data to a file <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'DataSection', description: ''}, {name: 'path', type: 'String', description: 'path to the file'}]}], fields: [{name: 'YAMLParser', description: 'Custom parser for YAML that preserves comments with the key they preceed', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'CommentedConfig', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles configs with comment and UTF-8 support. Can be used to handle config.yml to preserve/manage comments as well.', ext: 0, impl: [], constructors: [{name: 'CommentedConfig', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'name', type: 'String', description: 'file name'}]}], methods: [{name: 'checkDefaults', description: '<p>Checks the configuration for default values, copying default values over if they are not set. Once finished, the config is saved so the user can see the changes.</p> <p>This acts differently than saveDefaultConfig() as the config can already exist for this method. This is more for making sure users do not erase needed values from settings configs.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'clear', description: '<p>Clears all of the data in the config</p> <p>This doesn\'t save the config so if  you want the changes to be reflected in the actual file, call the save() method after doing this.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getConfig', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'config file'}, params: []}, {name: 'getConfigFile', description: '<p>Retrieves the file of the configuration</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'File', description: 'the file of the configuration'}, params: []}, {name: 'getFileName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the file this config saves to'}, params: []}, {name: 'getPlugin', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'JavaPlugin', description: 'plugin owning this config file'}, params: []}, {name: 'reload', description: 'Reloads the config data', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'save', description: 'Saves the config', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'saveDefaultConfig', description: 'Saves the default config if no file exists yet', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'trim', description: '<p>Trims excess (non-default) values from the configuration</p> <p>Any values that weren\'t in the default configuration are removed</p> <p>This is primarily used for settings configs </p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CommentedConfig', description: 'Handles configs with comment and UTF-8 support. Can be used to handle config.yml to preserve/manage comments as well.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CommentedLanguageConfig', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A special kind of configuration for handling language files</p> <p>Provides methods for sending and retrieving messages from the configuration for both players and the console using various kinds of filters.</p> <p>The language configuration works off of the defaults you include in the file when you build your plugin. At least one default is required to instantiate this class.</p> <p>This config supports comments and UTF-8 encoding for Strings.</p>', ext: 'CommentedConfig', impl: [], constructors: [{name: 'CommentedLanguageConfig', description: '<p>Constructs a language config from the defaults in the file</p> <p>If no default exists, an exception will be thrown because no messages would be available.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'file', type: 'String', description: 'path to the language file'}]}], methods: [{name: 'getMessage', description: '<p>Gets a message using the provided filters</p> <p>You can use this method instead of the sendMessage methods if you want to manipulate the string outside of the provided filters before sending the message.</p> <p>If the key is not in the language configuration, null will be returned</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'filtered message or null if an invalid key'}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'player', type: 'boolean', description: 'whether or not it is for a player'}, {name: 'filterType', type: 'FilterType', description: 'type of built-in filter to use'}, {name: 'filters', type: 'CustomFilter...', description: 'custom filters to use'}]}, {name: 'getMessage', description: '<p>Gets a message without any filters</p> <p>You can use this method instead of the sendMessage methods if you want to manipulate the string outside of the provided filters before sending the message.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'unfiltered message or null if an invalid key'}, params: [{name: 'key', type: 'String', description: 'key for the language message'}]}, {name: 'sendMessage', description: 'Sends a message to an area using the provided filters <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'loc', type: 'Location', description: 'location to send the message from'}, {name: 'radius', type: 'double', description: 'radius to send the message across'}, {name: 'filterType', type: 'FilterType', description: 'type of built-in filter to use'}, {name: 'filters', type: 'CustomFilter...', description: 'custom filters to use'}]}, {name: 'sendMessage', description: 'Sends a message without any filters to a list of players represented by their IDs <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'targetIds', type: 'Collection<UUID>', description: 'ids of the recipients of the message'}]}, {name: 'sendMessage', description: 'Sends a message using the provided filters to a list of players represented by their IDs <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'targetIds', type: 'Collection<UUID>', description: 'ids of the recipients of the message'}, {name: 'filterType', type: 'FilterType', description: 'type of built-in filter to use'}, {name: 'filters', type: 'CustomFilter...', description: 'custom filters to use'}]}, {name: 'sendMessage', description: 'Sends a message without any filters <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'target', type: 'CommandSender', description: 'recipient of the message'}]}, {name: 'sendMessage', description: 'Sends a message using the provided filters <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'target', type: 'CommandSender', description: 'recipient of the message'}, {name: 'filterType', type: 'FilterType', description: 'type of built-in filter to use'}, {name: 'filters', type: 'CustomFilter...', description: 'custom filters to use'}]}, {name: 'sendMessage', description: 'Sends a message to an area without any filters <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'loc', type: 'Location', description: 'location to send the message from'}, {name: 'radius', type: 'double', description: 'radius to send the message across'}]}], fields: [{name: 'CommentedLanguageConfig', description: '<p>A special kind of configuration for handling language files</p> <p>Provides methods for sending and retrieving messages from the configuration for both players and the console using various kinds of filters.</p> <p>The language configuration works off of the defaults you include in the file when you build your plugin. At least one default is required to instantiate this class.</p> <p>This config supports comments and UTF-8 encoding for Strings.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Config', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles configs for files other than the default config.yml <p/> Slightly modified version of the one from the bukkit tutorial Source: http:', ext: 0, impl: [], constructors: [{name: 'Config', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'name', type: 'String', description: 'file name'}]}], methods: [{name: 'addSavable', description: 'Adds a savable object to the config for automatic saving <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'savable', type: 'ISavable', description: 'savable object'}, {name: 'basePath', type: 'String', description: 'base path for it'}]}, {name: 'checkDefaults', description: '<p>Checks the configuration for default values, copying default values over if they are not set. Once finished, the config is saved so the user can see the changes.</p> <p>This acts differently than saveDefaultConfig() as the config can already exist for this method. This is more for making sure users do not erase needed values from settings configs.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'clear', description: '<p>Clears all of the data in the config</p> <p>This doesn\'t save the config so if  you want the changes to be reflected in the actual file, call the saveConfig() method after doing this.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'clear', description: '<p>Clears all of the data in the configuration section</p> <p>This doesn\'t save the config so if  you want the changes to be reflected in the actual file, call the saveConfig() method after doing this.</p>', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'ConfigurationSection', description: ''}]}, {name: 'deleteSavable', description: 'Deletes the savable from the config <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'savable', type: 'ISavable', description: 'savable to delete'}]}, {name: 'getConfig', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'FileConfiguration', description: 'config file'}, params: []}, {name: 'getConfigFile', description: '<p>Retrieves the file of the configuration</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'File', description: 'the file of the configuration'}, params: []}, {name: 'getFile', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the file this config saves to'}, params: []}, {name: 'getPlugin', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'JavaPlugin', description: 'plugin owning this config file'}, params: []}, {name: 'reloadConfig', description: 'Reloads the config', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'save', description: 'Saves if there are savables added', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'saveConfig', description: 'Saves the config', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'saveDefaultConfig', description: 'Saves the default config if no file exists yet', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'setDefaults', description: '<p>A recursive method to set the defaults of the config</p> <p>Only defaults that aren\'t set in the current config are copied over so that user changes aren\'t overwritten.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'ConfigurationSection', description: 'config section to set the defaults for'}]}, {name: 'trim', description: '<p>Trims excess (non-default) values from the configuration</p> <p>Any values that weren\'t in the default configuration are removed</p> <p>This is primarily used for settings configs </p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'trim', description: '<p>A recursive method to trim the non-default values from a config</p> <p>This is for clearing unnecessary values from settings configs</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'ConfigurationSection', description: 'configuration section to trim'}]}], fields: [{name: 'Config', description: 'Handles configs for files other than the default config.yml <p/> Slightly modified version of the one from the bukkit tutorial Source: http:', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ConfigSerializer', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Utility class for serializing objects with control via annotations</p> <p>The two annotations used by this serializer are SerializableField and ExcludeField</p> <p>To exclude a field from serialization, annotate it with ExcludeField</p> <p>To make a field be serialized further, annotate it with SerializableField</p> <p>You can define flags and flag groups to change when fields can be serialized</p> <br/> <p>IMPORTANT: You should exclude any fields that have two-way pointers (I.E. a child element that has its parent as a field when its parent has the child as a field). If you don\'t, you will likely get a StackOverflowException when serializing! If you need the references, exclude only the child so that when you serialize the parent, it will still serialize the child but not cause the problem.</p> <p>Also, primitive arrays such as int[] give the config problems. Where possible, use array lists instead for better compatibility.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'defineFlag', description: 'Defines a new flag for field exclusion <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'flag name'}]}, {name: 'defineFlagGroup', description: 'Defines a new flag group for field exclusion <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'flag name'}, {name: 'members', type: 'String...', description: 'names of flags to include in the group'}]}, {name: 'serialize', description: '<p>Serializes an object excluding fields that match the provided exclude flag</p> <p>Matching a flag requires the two flags to share any flag. This means that two flag groups will match if at least one of their children match and two regular flags will match only when they are the same.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'obj', type: 'Object', description: 'object to serialize'}, {name: 'config', type: 'ConfigurationSection', description: 'config to serialize into'}, {name: 'flag', type: 'String', description: 'flag name'}]}, {name: 'serialize', description: 'Serializes an object excluding fields with any exclude annotations <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'obj', type: 'Object', description: 'object to serialize'}, {name: 'config', type: 'ConfigurationSection', description: 'config to serialize to'}]}], fields: [{name: 'ALL_FLAG', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'ConfigSerializer', description: '<p>Utility class for serializing objects with control via annotations</p> <p>The two annotations used by this serializer are SerializableField and ExcludeField</p> <p>To exclude a field from serialization, annotate it with ExcludeField</p> <p>To make a field be serialized further, annotate it with SerializableField</p> <p>You can define flags and flag groups to change when fields can be serialized</p> <br/> <p>IMPORTANT: You should exclude any fields that have two-way pointers (I.E. a child element that has its parent as a field when its parent has the child as a field). If you don\'t, you will likely get a StackOverflowException when serializing! If you need the references, exclude only the child so that when you serialize the parent, it will still serialize the child but not cause the problem.</p> <p>Also, primitive arrays such as int[] give the config problems. Where possible, use array lists instead for better compatibility.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CustomFilter', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A custom filter to apply to language messages</p> <p>This can be used to insert data such as player names, stats, or other data</p>', ext: 0, impl: [], constructors: [{name: 'CustomFilter', description: '<p>Creates a new custom filter</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'token', type: 'String', description: 'string to search for to replace (e.g. "{player}")'}, {name: 'replacement', type: 'String', description: 'string to replace the token with (e.g. "Bob")'}]}], methods: [{name: 'apply', description: 'Applies the filter to the string <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: [{name: 'string', type: 'String', description: 'string to apply to'}]}, {name: 'apply', description: 'Applies the filter to the string builder <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sb', type: 'StringBuilder', description: 'string builder to apply to'}]}, {name: 'getReplacement', description: 'Gets the replacement string of the filter <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'replacement string'}, params: []}, {name: 'getToken', description: 'Gets the token string of the filter <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'token string'}, params: []}, {name: 'setReplacement', description: 'Sets the replacement string for the filter <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'CustomFilter', description: ''}, params: [{name: 'replacement', type: 'String', description: 'replacement'}]}], fields: [{name: 'CustomFilter', description: '<p>A custom filter to apply to language messages</p> <p>This can be used to insert data such as player names, stats, or other data</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DataFile', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles saving/loading data in a more condensed JSON format with UTF-8 support in order to save disk space compared to regular YAML configurations.', ext: 0, impl: [], constructors: [{name: 'DataFile', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'name', type: 'String', description: 'file name'}]}], methods: [{name: 'clear', description: '<p>Clears all of the data in the config</p> <p>This doesn\'t save the config so if  you want the changes to be reflected in the actual file, call the save() method after doing this.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getData', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DataSection', description: 'config file'}, params: []}, {name: 'getFile', description: '<p>Retrieves the file of the configuration</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'File', description: 'the file of the configuration'}, params: []}, {name: 'getFileName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the file this config saves to'}, params: []}, {name: 'getPlugin', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'JavaPlugin', description: 'plugin owning this config file'}, params: []}, {name: 'reload', description: 'Reloads the config data', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'save', description: 'Saves the config', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'DataFile', description: 'Handles saving/loading data in a more condensed JSON format with UTF-8 support in order to save disk space compared to regular YAML configurations.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Filter', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A collection of commonly used filters to avoid needing to instantiate them repeatedly. To set the replacement, just do .setReplacement(String). This method also returns the filter back so you can put it straight in the sendMessage or getMessage calls.</p> <p/> <p>Note: you are not limited to this list. You can create your own filters using just the CustomFilter constructor. This list is merely for slight optimizations by avoiding creating filters constantly. You can make your own global filters as well to make your own optimizations as well.</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'AMOUNT', description: '<p>Filter for a numerical amount</p> <p>Token: {amount}</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'DESCRIPTION', description: '<p>Filter for a description</p> <p>Token: {description}</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'Filter', description: '<p>A collection of commonly used filters to avoid needing to instantiate them repeatedly. To set the replacement, just do .setReplacement(String). This method also returns the filter back so you can put it straight in the sendMessage or getMessage calls.</p> <p/> <p>Note: you are not limited to this list. You can create your own filters using just the CustomFilter constructor. This list is merely for slight optimizations by avoiding creating filters constantly. You can make your own global filters as well to make your own optimizations as well.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MESSAGE', description: '<p>Filter for a generic message</p> <p>Token: {message}</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'PLAYER', description: '<p>Filter for player names</p> <p>Token: {player}</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'TARGET', description: '<p>Filter for a target\'s name</p> <p>Token: {target}</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}, {name: 'VALUE', description: '<p>Filter for a generic value</p> <p>Token: {value}</p>', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'CustomFilter', scope: 'public'}], scope: 'public'},
        {name: 'LanguageConfig', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A special kind of configuration for handling language files</p> <p>Provides methods for sending and retrieving messages from the configuration for both players and the console using various kinds of filters.</p> <p>The language configuration works off of the defaults you include in the file when you build your plugin. At least one default is required to instantiate this class.</p>', ext: 'Config', impl: [], constructors: [{name: 'LanguageConfig', description: '<p>Constructs a language config from the defaults in the file</p> <p>If no default exists, an exception will be thrown because no messages would be available.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'file', type: 'String', description: 'path to the language file'}]}], methods: [{name: 'getMessage', description: '<p>Gets a message using the provided filters</p> <p>You can use this method instead of the sendMessage methods if you want to manipulate the string outside of the provided filters before sending the message.</p> <p>If the key is not in the language configuration, null will be returned</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'filtered message or null if an invalid key'}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'player', type: 'boolean', description: 'whether or not it is for a player'}, {name: 'filterType', type: 'FilterType', description: 'type of built-in filter to use'}, {name: 'filters', type: 'CustomFilter...', description: 'custom filters to use'}]}, {name: 'getMessage', description: '<p>Gets a message without any filters</p> <p>You can use this method instead of the sendMessage methods if you want to manipulate the string outside of the provided filters before sending the message.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'unfiltered message or null if an invalid key'}, params: [{name: 'key', type: 'String', description: 'key for the language message'}]}, {name: 'sendMessage', description: 'Sends a message to an area using the provided filters <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'loc', type: 'Location', description: 'location to send the message from'}, {name: 'radius', type: 'double', description: 'radius to send the message across'}, {name: 'filterType', type: 'FilterType', description: 'type of built-in filter to use'}, {name: 'filters', type: 'CustomFilter...', description: 'custom filters to use'}]}, {name: 'sendMessage', description: 'Sends a message without any filters to a list of players represented by their IDs <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'targetIds', type: 'Collection<UUID>', description: 'ids of the recipients of the message'}]}, {name: 'sendMessage', description: 'Sends a message using the provided filters to a list of players represented by their IDs <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'targetIds', type: 'Collection<UUID>', description: 'ids of the recipients of the message'}, {name: 'filterType', type: 'FilterType', description: 'type of built-in filter to use'}, {name: 'filters', type: 'CustomFilter...', description: 'custom filters to use'}]}, {name: 'sendMessage', description: 'Sends a message without any filters <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'target', type: 'CommandSender', description: 'recipient of the message'}]}, {name: 'sendMessage', description: 'Sends a message using the provided filters <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'target', type: 'CommandSender', description: 'recipient of the message'}, {name: 'filterType', type: 'FilterType', description: 'type of built-in filter to use'}, {name: 'filters', type: 'CustomFilter...', description: 'custom filters to use'}]}, {name: 'sendMessage', description: 'Sends a message to an area without any filters <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the language message'}, {name: 'loc', type: 'Location', description: 'location to send the message from'}, {name: 'radius', type: 'double', description: 'radius to send the message across'}]}], fields: [{name: 'LanguageConfig', description: '<p>A special kind of configuration for handling language files</p> <p>Provides methods for sending and retrieving messages from the configuration for both players and the console using various kinds of filters.</p> <p>The language configuration works off of the defaults you include in the file when you build your plugin. At least one default is required to instantiate this class.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LocationData', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Provides methods of serializing and then parsing back location data for config storage', ext: 0, impl: [], constructors: [], methods: [{name: 'parseCompactLocations', description: '<p>Parses a list of locations from a compact data string</p> <p>Compact data strings are the results from the serializeCompactLocation methods</p> <p>Returns null if the data string is null or empty</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Location>', description: 'parsed list of locations'}, params: [{name: 'dataString', type: 'String', description: 'compact data string to parse'}]}, {name: 'parseLocation', description: '<p>Parses a location from a data string</p> <p>This accepts simple, normal, and detailed locations</p> <p>Returns null for invalid formats or a null data string</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: 'parsed location'}, params: [{name: 'dataString', type: 'String', description: 'data string to parse'}]}, {name: 'parseLocations', description: '<p>Parses a list of locations from a list of data strings</p> <p>This method accepts simple, normal, and detailed data string lists</p> <p>If the provided list is null or empty, this method returns null</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Location>', description: 'list of parsed locations'}, params: [{name: 'dataStrings', type: 'List<String>', description: 'data strings to parse'}]}, {name: 'serializeCompactDetailedLocations', description: '<p>Serializes a list of locations into a single string, keeping only the exact coordinates without yaw or pitch</p> <p>Returns null if the provided list is null or empty</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'data string'}, params: [{name: 'locations', type: 'List<Location>', description: 'locations to serialize'}]}, {name: 'serializeCompactLocations', description: '<p>Serializes a list of locations into a single string, keeping only the exact coordinates without yaw or pitch</p> <p>Returns null if the provided list is null or empty</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'data string'}, params: [{name: 'locations', type: 'List<Location>', description: 'locations to serialize'}]}, {name: 'serializeCompactSimpleLocations', description: '<p>Serializes a list of locations into a single string, keeping only the block coordinates</p> <p>Returns null if the provided list is null or empty</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'data string'}, params: [{name: 'locations', type: 'List<Location>', description: 'locations to serialize'}]}, {name: 'serializeDetailedLocation', description: '<p>Serializes all data for a location including exact coordinates, yaw, and pitch</p> <p>Returns null for a null location</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'data string'}, params: [{name: 'loc', type: 'Location', description: 'location to serialize'}]}, {name: 'serializeDetailedLocations', description: '<p>Serializes a list of locations, preserving the exact coordinates, yaw, and pitch</p> <p>If the provided list is null or empty, this method returns null</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'list of data strings'}, params: [{name: 'locations', type: 'List<Location>', description: 'locations to serialize'}]}, {name: 'serializeLocation', description: '<p>Serializes a location with the exact coordinates but without keeping the yaw and pitch</p> <p>Returns null for a null location</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'data string'}, params: [{name: 'loc', type: 'Location', description: 'location to serialize'}]}, {name: 'serializeLocations', description: '<p>Serializes a list of locations, preserving the exact coordinates but not the yaw and pitch</p> <p>If the provided list is null or empty, this method returns null</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'list of data strings'}, params: [{name: 'locations', type: 'List<Location>', description: 'locations to serialize'}]}, {name: 'serializeSimpleLocation', description: '<p>Serializes a location using as little space as possible</p> <p>This only keeps the block coordinates instead of the precise coordinates</p> <p>Yaw and pitch are not preserved either</p> <p>Returns null for a null location</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'data string'}, params: [{name: 'loc', type: 'Location', description: 'location to serialize'}]}, {name: 'serializeSimpleLocations', description: '<p>Serializes a list of locations, preserving the block coordinates only</p> <p>If the provided list is null or empty, this method returns null</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'list of data strings'}, params: [{name: 'locations', type: 'List<Location>', description: 'locations to serialize'}]}], fields: [{name: 'LocationData', description: 'Provides methods of serializing and then parsing back location data for config storage', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Resources', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A utility class for copying resource files to the server directory.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'copy', description: '<p>Copies a resource to the plugin\'s data folder using the provided destination to save to. If the file already exists it will be overwritten.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'resource', type: 'String', description: 'resource to copy'}, {name: 'destination', type: 'String', description: 'destination to save the file to'}]}, {name: 'copy', description: '<p>Copies a resource to the plugin\'s data folder using the provided destination to save to.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'resource', type: 'String', description: 'resource to copy'}, {name: 'destination', type: 'String', description: 'destination to save the file to'}, {name: 'overwrite', type: 'boolean', description: 'whether or not to overwrite existing files'}]}, {name: 'copy', description: '<p>Copies a resource to the plugin\'s data folder using the same file name as the resource. If the file already exists it will be overwritten.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'resource', type: 'String', description: 'resource to copy'}]}, {name: 'copy', description: '<p>Copies a resource to the plugin\'s data folder using the same file name as the resource.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'resource', type: 'String', description: 'resource to copy'}, {name: 'overwrite', type: 'boolean', description: 'whether or not to overwrite existing files'}]}], fields: [{name: 'Resources', description: '<p>A utility class for copying resource files to the server directory.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'Enchants', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Provides tools for converting names of enchantments', ext: 0, impl: [], constructors: [], methods: [{name: 'getBukkitName', description: 'Gets the bukkit name of an enchantment from the vanilla name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'bukkit enchantment name'}, params: [{name: 'vanillaName', type: 'String', description: 'vanilla enchantment name'}]}, {name: 'getVanillaName', description: 'Gets the vanilla enchantment name from the bukkit name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'vanilla enchantment name'}, params: [{name: 'bukkitName', type: 'String', description: 'bukkit enchantment name'}]}, {name: 'getVanillaName', description: 'Gets the vanilla enchantment name for an enchantment <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'vanilla name of enchantment'}, params: [{name: 'enchant', type: 'Enchantment', description: 'enchantment'}]}], fields: [{name: 'Enchants', description: 'Provides tools for converting names of enchantments', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'EquipListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A repeating task to check when players equip and unequip items</p> <p>This is set up by MCCore already and should not be instantiated by another plugin as it will cause duplicate results leading to undesired behavior.</p>', ext: 0, impl: ['Listener'], constructors: [{name: 'EquipListener', description: '<p>Creates a new listener for player equipment</p> <p>You should not be instantiating this class as MCCore handles it already.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'MCCore', description: 'plugin reference'}]}], methods: [{name: 'onClick', description: 'Listens for inventory events for changing equipment <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'InventoryClickEvent', description: 'event details'}]}, {name: 'onDeath', description: 'Listens for the player dying and losing their equipment <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerDeathEvent', description: 'event details'}]}, {name: 'onInteract', description: 'Listens for right clicking with armor for changing equipment <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerInteractEvent', description: 'event details'}]}], fields: [{name: 'EquipListener', description: '<p>A repeating task to check when players equip and unequip items</p> <p>This is set up by MCCore already and should not be instantiated by another plugin as it will cause duplicate results leading to undesired behavior.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemGainDurabilityEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event for when a player\'s item gains durability', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'ItemGainDurabilityEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'Player', description: 'player with the item'}, {name: 'item', type: 'ItemStack', description: 'item that lost durability'}, {name: 'amount', type: 'int', description: ''}]}], methods: [{name: 'getAmount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'amount of durability gained'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getItem', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item that was equipped'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'plyer that equipped the item'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not this event has been cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setAmount', description: 'Sets the amount of durability to gain <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of durability to lose'}]}, {name: 'setCancelled', description: 'Sets whether or not to cancel the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'whether or not to cancel the event'}]}], fields: [{name: 'ItemGainDurabilityEvent', description: 'Event for when a player\'s item gains durability', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemLoseDurabilityEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event for when a player\'s item loses durability', ext: 'Event', impl: ['Cancellable'], constructors: [{name: 'ItemLoseDurabilityEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'Player', description: 'player with the item'}, {name: 'item', type: 'ItemStack', description: 'item that lost durability'}, {name: 'amount', type: 'int', description: ''}]}], methods: [{name: 'getAmount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'amount of durability lost'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getItem', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item that was equipped'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'plyer that equipped the item'}, params: []}, {name: 'isCancelled', description: 'Checks whether or not this event has been cancelled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cancelled, false otherwise'}, params: []}, {name: 'setAmount', description: 'Sets the amount of durability to lose <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'int', description: 'amount of durability to lose'}]}, {name: 'setCancelled', description: 'Sets whether or not to cancel the event <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'cancelled', type: 'boolean', description: 'whether or not to cancel the event'}]}], fields: [{name: 'ItemLoseDurabilityEvent', description: 'Event for when a player\'s item loses durability', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerEquipEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event for when a player equips an item', ext: 'Event', impl: [], constructors: [{name: 'PlayerEquipEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'Player', description: 'player equipping an item'}, {name: 'item', type: 'ItemStack', description: 'item that was equipped'}, {name: 'slot', type: 'int', description: 'the slot the item was unequipped from'}]}], methods: [{name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getItem', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item that was equipped'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'plyer that equipped the item'}, params: []}, {name: 'getSlot', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'armor slot that was equipped'}, params: []}], fields: [{name: 'PlayerEquipEvent', description: 'Event for when a player equips an item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerMoneyChangedEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Event for when someone gains or loses money</p> <p>Note: This event is not automatically fired. It is to be implemented by economy plugins.</p>', ext: 'Event', impl: [], constructors: [{name: 'PlayerMoneyChangedEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'Player', description: 'player equipping an item'}, {name: 'change', type: 'double', description: 'amount the balance changed by'}, {name: 'balance', type: 'double', description: 'new balance of the player'}]}], methods: [{name: 'getAmount', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount the player\'s balance changed by'}, params: []}, {name: 'getBalance', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'new balance of the player'}, params: []}, {name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'plyer that equipped the item'}, params: []}], fields: [{name: 'PlayerMoneyChangedEvent', description: '<p>Event for when someone gains or loses money</p> <p>Note: This event is not automatically fired. It is to be implemented by economy plugins.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerUnequipEvent', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Event for a player un-equipping an item', ext: 'Event', impl: [], constructors: [{name: 'PlayerUnequipEvent', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'Player', description: 'player un-equipping the item'}, {name: 'item', type: 'ItemStack', description: 'item that was un-equipped'}, {name: 'slot', type: 'int', description: 'the slot the item was unequipped from'}]}], methods: [{name: 'getHandlerList', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getHandlers', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'HandlerList', description: 'handlers for this event'}, params: []}, {name: 'getItem', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'item that was un-equipped'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'player un-equipping the item'}, params: []}, {name: 'getSlot', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'armor slot that was equipped'}, params: []}], fields: [{name: 'PlayerUnequipEvent', description: 'Event for a player un-equipping an item', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'MapBuffer', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A specific MapImage used to represent a full map canvas and draw to it as efficiently as possible. <p/> Just as a comparison between render methods: - Built in MapCanvas.drawImage: ~40ms for 128x128 image - Slow MapBuffer method: ~ 0.08ms for 128x128 image - Fast MapBuffer method: ~ 0.001ms for 128x128 image <p/> In other words: - Slow MapBuffer method is ~500x faster than MapCanvas.drawImage - Fast MapBuffer method is ~40,000x faster than MapCanvas.drawImage', ext: 'MapImage', impl: [], constructors: [{name: 'MapBuffer', description: 'Initializes a new MapBuffer with a size of 128x128 that acts as a buffer for the given MapView', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'view', type: 'MapView', description: ''}]}], methods: [{name: 'drawTo', description: 'Efficiently draws the buffer to the canvas <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'canvas', type: 'MapCanvas', description: 'canvas to draw to'}]}, {name: 'fastDrawSupported', description: 'Checks whether or not fast drawing is supported. Fast drawing can handle thousands of draws every tick while normal drawing can only handle about 50-100 maximum. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if fast drawing is supported on this server, false otherwise'}, params: []}], fields: [{name: 'bounds', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'int[]', scope: 'protected'}, {name: 'dirty', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'boolean', scope: 'protected'}, {name: 'MapBuffer', description: 'A specific MapImage used to represent a full map canvas and draw to it as efficiently as possible. <p/> Just as a comparison between render methods: - Built in MapCanvas.drawImage: ~40ms for 128x128 image - Slow MapBuffer method: ~ 0.08ms for 128x128 image - Fast MapBuffer method: ~ 0.001ms for 128x128 image <p/> In other words: - Slow MapBuffer method is ~500x faster than MapCanvas.drawImage - Fast MapBuffer method is ~40,000x faster than MapCanvas.drawImage', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapData', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents the data for a map hierarchy. These should only be set up by the MapMenuManager. Use that class to set up and manage menus instead.', ext: 'MapRenderer', impl: [], constructors: [{name: 'MapData', description: 'Initializes a new renderer and data set for a map view using the given menu as the root of the hierarchy. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'root', type: 'MapMenu', description: 'root map menu'}, {name: 'view', type: 'MapView', description: 'view to set up renderer for'}]}], methods: [{name: 'back', description: '<br><br>Returns a player back to the previous map menu in the hierarchy if they are not already at the root level. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to return back to the previous menu'}]}, {name: 'clear', description: 'Removes the menu data for a player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to remove for'}]}, {name: 'getMapItem', description: 'Retrieves the map ItemStack representing this menu hierarchy. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack', description: 'map ItemStack for the menu'}, params: []}, {name: 'getMenu', description: 'Retrieves the current menu being seen by a specific player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapMenu', description: 'the current map the player is viewing'}, params: [{name: 'player', type: 'Player', description: 'player to retrieve the current map for'}]}, {name: 'next', description: 'Sends a player to the next menu in the hierarchy if they are currently at the parent menu. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: ''}, {name: 'menu', type: 'MapMenu', description: 'menu to transition to'}]}, {name: 'render', description: 'Renders to the map canvas each frame <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mapView', type: 'MapView', description: 'the map view owning the canvas'}, {name: 'mapCanvas', type: 'MapCanvas', description: 'the canvas to draw to'}, {name: 'player', type: 'Player', description: 'the player looking at the map'}]}], fields: [{name: 'MapData', description: 'Represents the data for a map hierarchy. These should only be set up by the MapMenuManager. Use that class to set up and manage menus instead.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapFont', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents a font that can more efficiently draw to a map canvas', ext: 0, impl: [], constructors: [{name: 'MapFont', description: 'Initializes a MapFont using a Font template <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'font', type: 'Font', description: 'font template'}, {name: 'space', type: 'int', description: 'spacing between characters'}]}], methods: [{name: 'getChar', description: 'Gets data for a character from the font. If the character is not initialized, it will be initialized first. <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapChar', description: 'character data for the font'}, params: [{name: 'c', type: 'char', description: 'character to get the data of'}]}, {name: 'getFont', description: 'Retrieves the font wrapped by this object <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Font', description: 'wrapped font'}, params: []}, {name: 'getSpace', description: 'Retrieves the spacing between letters for this font <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'spacing between letters'}, params: []}, {name: 'measureString', description: 'Measures the dimensions of a string <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int[]', description: 'the dimensions of the string { width, height, yOffset }'}, params: [{name: 'str', type: 'String', description: 'string to measure'}]}], fields: [{name: 'MapFont', description: 'Represents a font that can more efficiently draw to a map canvas', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapImage', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents an image in the format used by Minecraft maps to speed up the drawing process. MapImages loaded from files/URLs can take a little while to load though, so set them up on enable to avoid any stalls during the game.', ext: 0, impl: [], constructors: [{name: 'MapImage', description: 'Initializes a new MapImage from an external URL, converting it to a format that works better with the map canvas. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'url', type: 'URL', description: 'URL to load from'}]}, {name: 'MapImage', description: 'Initializes a new MapImage from a file, converting it to a format that works better with the map canvas <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'file', type: 'File', description: 'file to load from'}]}, {name: 'MapImage', description: 'Creates an empty image with a format that works better with the map canvas. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'size', type: 'int[]', description: 'size of the image { width, height }'}]}, {name: 'MapImage', description: 'Initializes a default map image matching the size of a general map (128x128).', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: []}, {name: 'MapImage', description: 'Creates an empty image with a format that works better with the map canvas. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'width', type: 'int', description: 'width of the image'}, {name: 'height', type: 'int', description: 'height of the image'}]}], methods: [{name: 'clear', description: 'Clears the image', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'drawColorString', description: 'Draws a string to the image <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'x-coordinate at the end of the render'}, params: [{name: 'font', type: 'MapFont', description: 'font to use'}, {name: 'color', type: 'byte', description: 'starting color of the text'}, {name: 'str', type: 'String', description: 'string to draw'}, {name: 'x', type: 'int', description: 'starting horizontal position'}, {name: 'y', type: 'int', description: 'baseline position of the text'}, {name: 'token', type: 'char', description: ''}]}, {name: 'drawImg', description: 'Draws an image onto this image <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'img', type: 'MapImage', description: 'image to draw'}, {name: 'x', type: 'int', description: 'horizontal position'}, {name: 'y', type: 'int', description: 'vertical position'}]}, {name: 'drawString', description: 'Draws a string to the image <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'x-coordinate at the end of the render'}, params: [{name: 'font', type: 'MapFont', description: 'font to use'}, {name: 'color', type: 'byte', description: 'color of the text'}, {name: 'str', type: 'String', description: 'string to draw'}, {name: 'x', type: 'int', description: 'starting horizontal position'}, {name: 'y', type: 'int', description: 'baseline position of the text'}]}, {name: 'drawTo', description: 'Draws the image to the canvas. Normally you should instead draw to a MapBuffer and then draw the mapBuffer to the canvas unless you are only drawing a single small image. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'canvas', type: 'MapCanvas', description: 'canvas to draw to'}, {name: 'x', type: 'int', description: ''}, {name: 'y', type: 'int', description: ''}]}, {name: 'fill', description: 'Fills the image with the given color <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'color', type: 'byte', description: 'color to fill'}]}, {name: 'getColor', description: 'Retrieves a color by a given Map Palette ID <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Color', description: 'java color represented by the ID'}, params: [{name: 'id', type: 'byte', description: 'map palette ID'}]}, {name: 'getData', description: 'Retrieves the byte data of the image <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'byte[]', description: 'byte data of the image'}, params: []}, {name: 'getHeight', description: 'Retrieves the height of the image <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'height of the image'}, params: []}, {name: 'getWidth', description: 'Retrieves the width of the image <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'width of the image'}, params: []}, {name: 'init', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'matchColor', description: 'Gets the closest color to the provided one that is available for the map canvas. <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'byte', description: 'map palette color closest to the original'}, params: [{name: 'color', type: 'Color', description: 'color to convert to a map palette color'}]}], fields: [{name: 'MapImage', description: 'Represents an image in the format used by Minecraft maps to speed up the drawing process. MapImages loaded from files/URLs can take a little while to load though, so set them up on enable to avoid any stalls during the game.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'offset', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'int', scope: 'protected'}], scope: 'public'},
        {name: 'MapImageManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages loading images for all plugins to prevent duplicate loading of the same image and keeps everything in one place.', ext: 0, impl: [], constructors: [], methods: [{name: 'copyImageResource', description: 'Copies an embedded image resource from the plugin to the given path. The path is from the root of the server so to place it within your plugin\'s data folder, preceed the path with "plugins/MyPlugin". <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if copied successfully, false otherwise'}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin to get the resource from'}, {name: 'name', type: 'String', description: 'name of the resource image (including extension)'}, {name: 'path', type: 'String', description: 'path to the destination'}]}, {name: 'getImage', description: 'Retrieves an image from the specified path. The path starts from the root of the server, so if you\'re getting an image from your plugin\'s data folder, you need to include "plugins/MyPlugin" before it. This will load the image if it hasn\'t been loaded already. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapImage', description: 'loaded image'}, params: [{name: 'path', type: 'String', description: 'path to the image'}]}], fields: [{name: 'MapImageManager', description: 'Manages loading images for all plugins to prevent duplicate loading of the same image and keeps everything in one place.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles controls events for map menus', ext: 0, impl: ['Listener'], constructors: [{name: 'MapListener', description: 'Sets up the map listener. Other plugins should not initialize this. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'mcCore', type: 'MCCore', description: 'MCCore reference'}]}], methods: [{name: 'onInteract', description: 'Handles selecting the current item in the menu <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerToggleSneakEvent', description: 'event details'}]}, {name: 'onInteract', description: 'Handles selecting the current item in the menu <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerInteractEvent', description: 'event details'}]}, {name: 'onMove', description: 'Movement controls in a map menu <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerMoveEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Clears player menu data on quit <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}], fields: [{name: 'MapListener', description: 'Handles controls events for map menus', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapMenu', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'Represents one menu of navigation for a map. Menus can navigate between each other or be independent.', ext: 0, impl: [], constructors: [], methods: [{name: 'getData', description: 'Retrieves stored data for the player by key <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'the retrieved data'}, params: [{name: 'player', type: 'Player', description: 'player to get the data for'}, {name: 'key', type: 'String', description: 'key the data was stored under'}]}, {name: 'getParent', description: 'Retrieves the parent menu for this menu. If a map was created using this menu as the top level, the parent will not be returned to despite hitting back. This is more for the global menu connecting everything together. <br><br', isStatic: 0, isFinal: 1, isAbstract: 0, scope: 'public', returnValue: {type: 'MapMenu', description: 'parent menu'}, params: []}, {name: 'getScene', description: 'Retrieves the scene manager for the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapScene', description: 'the scene manager for the player'}, params: [{name: 'player', type: 'Player', description: 'player to get the scene manager for'}]}, {name: 'getSelection', description: 'Gets the current selection of the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Integer', description: 'the current selection of the player'}, params: [{name: 'player', type: 'Player', description: 'player to get the selection of'}]}, {name: 'onBack', description: 'Called when the back key is pressed. This should be overridden when needed. Transitioning to the previous menu will be handled automatically for this control, but if you have other actions you want to take care of such as applying changes before exiting, apply them here. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player that hit the back button'}]}, {name: 'onDown', description: 'Called when the down key is pressed. This should be overridden when needed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player that moved down'}]}, {name: 'onExit', description: 'Similar to onBack, this is provided in case you need to clean up values. This is when the player switches their item from the map, exiting the menu. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player that exited the menu'}]}, {name: 'onLeft', description: 'Called when the left key is pressed. This should be overridden when needed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player that moved left'}]}, {name: 'onRight', description: 'Called when the right key is pressed. This should be overridden when needed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player that moved right'}]}, {name: 'onSelect', description: 'Called when the select key is pressed. This should be overridden when needed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player that selected the current item'}]}, {name: 'onUp', description: 'Called when the up key is pressed. This should be overridden when needed. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player that moved up'}]}, {name: 'render', description: 'The method used to render the map to the buffer. This will be called automatically when the player is looking at a map with this menu as the active menu. <br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'buffer', type: 'MapBuffer', description: 'buffer to draw to'}, {name: 'player', type: 'Player', description: ''}]}, {name: 'setData', description: 'Sets data for the player that persists between menus <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to set the data for'}, {name: 'key', type: 'String', description: 'key to store the data under'}, {name: 'data', type: 'Object', description: 'data to store'}]}, {name: 'setParent', description: 'Sets the parent of the menu which will be the menu that is returned to when the back button is hit. <br><br', isStatic: 0, isFinal: 1, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'menu', type: 'MapMenu', description: 'menu to return to when back is hit'}]}, {name: 'setSelection', description: 'Sets the current selection for the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to set the selection for'}, {name: 'selection', type: 'int', description: 'selection to use'}]}, {name: 'setup', description: 'Provides any setup for a player that may need to be done when navigating to the menu such as setting up the scene or applying selection data. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to initialize'}]}], fields: [{name: 'MapMenu', description: 'Represents one menu of navigation for a map. Menus can navigate between each other or be independent.', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapMenuManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles setting up', ext: 0, impl: [], constructors: [], methods: [{name: 'getActiveMenuData', description: 'Retrieves the map menu a player is looking at, if any. When a player is not holding a map menu, this will instead return null. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapData', description: 'active map menu or null if not found'}, params: [{name: 'player', type: 'Player', description: 'player to get the menu for'}]}, {name: 'getData', description: 'Creates a map item for the given map menu <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapData', description: ''}, params: [{name: 'menuKey', type: 'String', description: 'key of the menu the map should show'}]}, {name: 'registerMenu', description: 'Creates a new menu view using the given menu as the root. The root menu cannot backtrack to any other menus, only progress into child menus. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key to use for the menu group'}, {name: 'root', type: 'MapMenu', description: 'root of the menu chain'}]}, {name: 'sendBack', description: 'Sends a player back one level in their current menu chain. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to send back to the previous menu'}]}, {name: 'sendNext', description: 'Sends a player forward one level to the given menu. If the player is not currently at the parent menu of the new one, this will not do anything. You must follow the chain of menus for a given hierarchy. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to send back to the previous menu'}, {name: 'menu', type: 'MapMenu', description: ''}]}], fields: [{name: 'MapMenuManager', description: 'Handles setting up', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapObject', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'MCCore com.rit.sucy.gui.MapObject <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 0, impl: [], constructors: [{name: 'MapObject', description: 'Initializes the MapObject at the given coordinates and sets the visibility. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'img', type: 'MapImage', description: 'image to draw'}, {name: 'x', type: 'int', description: 'initial X position'}, {name: 'y', type: 'int', description: 'initial Y position'}, {name: 'visible', type: 'boolean', description: 'whether or not it can be seen initially'}]}, {name: 'MapObject', description: 'Initializes the MapObject at the given coordinates <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'img', type: 'MapImage', description: 'image to draw'}, {name: 'x', type: 'int', description: 'initial X position'}, {name: 'y', type: 'int', description: 'initial Y position'}]}], methods: [{name: 'clean', description: 'Cleans the object, removing any tracked changes. This should only be called by the API. Do not call this yourself', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'getFlagBounds', description: 'Retrieves the bounds of the changes. This shouldn\'t needed to be called outside the API. Don\'t use this unless you have a good reason. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int[]', description: 'bounds of changes to mark for the packet'}, params: []}, {name: 'getHeight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getWidth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getX', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'getY', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: ''}, params: []}, {name: 'hide', description: 'Hides the object, no longer drawing it each update', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'isDirty', description: 'Checks whether or not the object requires an update. This shouldn\'t needed to be called outside the API. Don\'t use this unless you have a good reason. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if required, false otherwise'}, params: []}, {name: 'move', description: 'Moves the object relative to its current location <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'x', type: 'int', description: 'horizontal change'}, {name: 'y', type: 'int', description: 'vertical change'}]}, {name: 'moveTo', description: 'Moves the object to the given position <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'x', type: 'int', description: 'horizontal position'}, {name: 'y', type: 'int', description: 'vertical position'}]}, {name: 'setVisible', description: 'Sets the visibility of the object using a boolean value <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'visible', type: 'boolean', description: 'visibility of the object'}]}, {name: 'show', description: 'Shows the object, enabling drawing it to the map', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'img', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'MapImage', scope: 'protected'}, {name: 'MapObject', description: 'MCCore com.rit.sucy.gui.MapObject <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'visible', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'boolean', scope: 'protected'}, {name: 'x', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'int', scope: 'protected'}, {name: 'y', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'int', scope: 'protected'}], scope: 'public'},
        {name: 'MapScene', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Represents a collection of images with positions to keep track of when drawing to a MapBuffer. This allows for less network bandwith to be used while still keeping the incredible speed of MapBuffer. Use this instead of drawing directly to a MapBuffer to reduce network bandwidth used by map menus.', ext: 0, impl: [], constructors: [], methods: [{name: 'add', description: 'Adds an object to the scene <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'access key for the object'}, {name: 'obj', type: 'MapObject', description: 'object to add to the scene'}]}, {name: 'apply', description: 'Updates the scene, getting the "dirty" bounds', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'buffer', type: 'MapBuffer', description: ''}]}, {name: 'clear', description: 'Clear the scene before moving onto a new menu', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'get', description: 'Retrieves an object from the scene by key <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapObject', description: 'the scene object'}, params: [{name: 'key', type: 'String', description: 'access key the object was added with'}]}], fields: [{name: 'MapScene', description: 'Represents a collection of images with positions to keep track of when drawing to a MapBuffer. This allows for less network bandwith to be used while still keeping the incredible speed of MapBuffer. Use this instead of drawing directly to a MapBuffer to reduce network bandwidth used by map menus.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapScheme', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A scheme used by a menu', ext: 0, impl: [], constructors: [], methods: [{name: 'create', description: 'Creates the schemes for the given plugin using the root folder as the place to load images for schemes from. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapScheme', description: 'the created map scheme'}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin reference'}, {name: 'root', type: 'File', description: 'the root folder for scheme images'}]}, {name: 'defineColor', description: 'Defines a color used by the scheme if the scheme is not already finalized <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key to use for the color'}, {name: 'colorHex', type: 'String', description: 'hex code of the default color'}]}, {name: 'defineFont', description: 'Defines a font used by the scheme if the scheme is not already finalized. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key to use for the font'}, {name: 'defaultFont', type: 'MapFont', description: 'default font to use'}]}, {name: 'defineImg', description: 'Defines an image used by the scheme if the scheme is not already finalized. The image name will be used as the access key. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'image', type: 'String', description: 'name of the embedded image resource to use'}]}, {name: 'defineImg', description: 'Defines an image used by the scheme if the scheme is not already finalized. <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key to use for the image'}, {name: 'image', type: 'String', description: 'name of the embedded image resource to use'}]}, {name: 'finalize', description: 'Finalizes the scheme and loads all other schemes', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'get', description: 'Retrieves a scheme for the plugin <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapScheme', description: 'the plugin\'s scheme or the default scheme if not found'}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin to get the scheme for'}, {name: 'name', type: 'String', description: 'name of the scheme'}]}, {name: 'getColor', description: 'Retrieves a color for the scheme <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'byte', description: 'the color for the scheme'}, params: [{name: 'key', type: 'String', description: 'color key'}]}, {name: 'getFont', description: 'Retrieves a font from the scheme <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapFont', description: 'the font of the scheme'}, params: [{name: 'key', type: 'String', description: 'font key'}]}, {name: 'getImage', description: 'Retrieves an image from the scheme <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'MapImage', description: 'the image for the scheme'}, params: [{name: 'key', type: 'String', description: 'image key'}]}, {name: 'getKey', description: 'Retrieves the key for the scheme <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'scheme key'}, params: []}, {name: 'list', description: 'Retrieves a list of schemes for the plugin. If the plugin never set up a scheme, this will return an empty list instead. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<MapScheme>', description: 'list of schemes for the plugin'}, params: [{name: 'plugin', type: 'JavaPlugin', description: 'plugin schemes'}]}], fields: [{name: 'MapScheme', description: 'A scheme used by a menu', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'MapString', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'MCCore com.rit.sucy.gui.MapString <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 'MapImage', impl: [], constructors: [{name: 'MapString', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'font', type: 'MapFont', description: ''}, {name: 'color', type: 'byte', description: ''}, {name: 'text', type: 'String', description: ''}]}], methods: [], fields: [{name: 'base', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'int', scope: 'protected'}, {name: 'MapString', description: 'MCCore com.rit.sucy.gui.MapString <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Durability', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A helper class for controlling the durability of applicable items</p> <p>The durabilities expressed in this class are the amount of durability left on the item rather than the durability consumed like from Bukkit\'s methods. For example, an item with full durability will return the maximum durability in this class while in Bukkit it will return 0.</p> <p>The methods will still apply the durabilities to items names if durabilities are disabled in MCCore\'s config, but they will not function in game as if they were changed because MCCore will not be able to update them.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'addDurability', description: '<p>Adds durability to the item</p> <p>If the item doesn\'t have durability, this method will not do anything</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'item', type: 'ItemStack', description: 'item to add durability to'}, {name: 'amount', type: 'int', description: 'amount of durability to add'}]}, {name: 'canHaveCustomDurability', description: '<p>Checks whether or not the item can have custom durabilities attached to it.</p> <p>This requires an item to pass the following checks:</p> <ul> <li>The item cannot be null</li> <li>The item must have a max durability greater than 0</li> </ul> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can have custom durability, false otherwise'}, params: [{name: 'item', type: 'ItemStack', description: 'item to check'}]}, {name: 'clearCustomDurability', description: '<p>Clears the custom durability set to an item</p> <p>This will remove the custom durability data but will leave the item\'s normal data alone so it will still have the same percentage durability left.</p> <p>If the item does not have a custom durability attached to it, this will do nothing.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'item', type: 'ItemStack', description: 'item to clear the durability for'}]}, {name: 'getDurability', description: '<p>Retrieves the durability of an item</p> <p>This will look for a custom durability and return that over the normal durability. When no custom durability is found, the default durability is returned</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'maximum durability'}, params: [{name: 'item', type: 'ItemStack', description: 'item to get the max durability of'}]}, {name: 'getMaxDurability', description: '<p>Retrieves the maximum durability of an item</p> <p>This will look for a custom max durability and return that over the normal max durability. When no custom max durability is found, the default max durability is returned</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'maximum durability'}, params: [{name: 'item', type: 'ItemStack', description: 'item to get the max durability of'}]}, {name: 'hasCustomDurability', description: '<p>Checks whether or not the item has a custom durability attached to it</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has custom durability, false otherwise'}, params: [{name: 'item', type: 'ItemStack', description: 'item to check'}]}, {name: 'setDurability', description: '<p>Sets the durability of an item</p> <p>This scales down the custom durability to the actual durability range so if the custom durability is wiped, it will still have the same percentage durability.</p> <p>If the item has no custom durability but normally has durability, this will apply the normal durability of the item.</p> <p>If the item cannot have a durability, this will do nothing to the item.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'item', type: 'ItemStack', description: 'item to set the durability of'}, {name: 'durability', type: 'int', description: 'the new durability'}]}, {name: 'setMaxDurability', description: '<p>Sets the maximum durability of an item</p> <p>This will be cleared if the name on the item is changed such as using an anvil or through plugin manipulation.</p> <p>The current durability of the item will be computed from the current percentage left on the item scaled to the new maximum durability. (e.g. an item with half durability being set to a max durability of 5,000 will now have 2,500 durability left)</p> <p>If the item cannot have a durability, this will do nothing to the item.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'item', type: 'ItemStack', description: 'item to set the max durability of'}, {name: 'max', type: 'int', description: 'the new durability'}]}, {name: 'subtractDurability', description: '<p>Subtracts durability from the item</p> <p>If the item doesn\'t have durability, this method will not do anything</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'item', type: 'ItemStack', description: 'item to subtract durability from'}, {name: 'amount', type: 'int', description: 'amount of durability to subtract'}]}], fields: [{name: 'Durability', description: '<p>A helper class for controlling the durability of applicable items</p> <p>The durabilities expressed in this class are the amount of durability left on the item rather than the durability consumed like from Bukkit\'s methods. For example, an item with full durability will return the maximum durability in this class while in Bukkit it will return 0.</p> <p>The methods will still apply the durabilities to items names if durabilities are disabled in MCCore\'s config, but they will not function in game as if they were changed because MCCore will not be able to update them.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'DurabilityListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Listener for handling custom durabilities</p>', ext: 0, impl: ['Listener'], constructors: [{name: 'DurabilityListener', description: '<p>Initializes a new listener</p> <p>MCCore already handles setting this up so you should not have to call this constructor</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'MCCore', description: 'MCCore reference'}]}], methods: [{name: 'onBreak', description: 'Checks for changes in durability for most tools when a player breaks a block <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'BlockBreakEvent', description: 'event details'}]}, {name: 'onDamaged', description: 'Checks for changes in durability for armor when a player is damaged in any way <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageEvent', description: 'event details'}]}, {name: 'onFish', description: 'Checks for changes in durability for fishing rods when a player fishes <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerFishEvent', description: 'event details'}]}, {name: 'onHit', description: 'Checks for changes in durability for weapons when a player hits another entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageByEntityEvent', description: 'event details'}]}, {name: 'onInteract', description: 'Checks for changes in durability for flint and steel when a player interacts with a block <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerInteractEvent', description: 'event details'}]}, {name: 'onLaunch', description: 'Checks for changes in durability for bows when a player launches an arrow <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityShootBowEvent', description: 'event details'}]}, {name: 'onShear', description: 'Checks for changes in durability for shears when a player interacts with an entity <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerShearEntityEvent', description: 'event details'}]}], fields: [{name: 'DurabilityListener', description: '<p>Listener for handling custom durabilities</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'InventoryManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages creating inventories and checking if the inventory is for a particular purpose using keys attached to the inventory holder. An example usage of this would be a custom shop inventory where functionality is attached to that specific inventory. Creating the inventory with a key, then checking on events for the matching key lets you easily apply functionality to only the shop inventories.', ext: 0, impl: [], constructors: [], methods: [{name: 'createInventory', description: 'Creates a new inventory marked with the given key <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Inventory', description: 'the created inventory'}, params: [{name: 'key', type: 'String', description: 'key to mark the inventory with'}, {name: 'rows', type: 'int', description: 'number of rows in the inventory'}, {name: 'title', type: 'String', description: 'title for the inventory'}]}, {name: 'getInventory', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Inventory', description: ''}, params: []}, {name: 'getKey', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: ''}, params: []}, {name: 'Holder', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'key', type: 'String', description: ''}]}, {name: 'isMatching', description: 'Checks whether the given inventory matches the given key <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if matches, false otherwise'}, params: [{name: 'inventory', type: 'Inventory', description: 'inventory to check'}, {name: 'key', type: 'String', description: 'key to check against'}]}], fields: [{name: 'InventoryManager', description: 'Manages creating inventories and checking if the inventory is for a particular purpose using keys attached to the inventory holder. An example usage of this would be a custom shop inventory where functionality is attached to that specific inventory. Creating the inventory with a key, then checking on events for the matching key lets you easily apply functionality to only the shop inventories.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'InventorySerializer', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A utility class for handling converting an inventory to/from a String to be stored into the MySQL database or any sort of file.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'deserialize', description: '<p>Deserializes the player inventory from the string</p> <p>The current contents of the inventory will be cleared before the deserialized items are added to it.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'inv', type: 'PlayerInventory', description: 'inventory to fill with the result'}, {name: 'dataString', type: 'String', description: 'inventory serialized string to deserialize'}]}, {name: 'deserialize', description: '<p>Deserializes the chest inventory from the string</p> <p>The current contents of the inventory will be cleared before the deserialized items are added to it.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'inv', type: 'Inventory', description: 'inventory to fill with the result'}, {name: 'dataString', type: 'String', description: 'inventory serialized string to deserialize'}]}, {name: 'deserializeArmor', description: '<p>Deserializes the armor contents from the inventory only.</p> <p>The main inventory contents will be ignored.</p> <p>If an armor piece was not in the data, it will be null instead.</p> <p>The returned array is in the same order as a player inventory\'s armor array.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ItemStack[]', description: 'armor contents'}, params: [{name: 'dataString', type: 'String', description: 'inventory serialized string to deserialize'}]}, {name: 'serialize', description: 'Serializes a chest inventory into a string <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'serialize string'}, params: [{name: 'inventory', type: 'Inventory', description: 'inventory to serialize'}]}, {name: 'serialize', description: '<p>Serializes the player\'s inventory into a string.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the serialized string'}, params: [{name: 'inventory', type: 'PlayerInventory', description: 'inventory to serialize'}]}], fields: [{name: 'InventorySerializer', description: '<p>A utility class for handling converting an inventory to/from a String to be stored into the MySQL database or any sort of file.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ItemManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Converts item names to/from vanilla names', ext: 0, impl: [], constructors: [], methods: [{name: 'getBukkitName', description: 'Restores the bukkit name from the vanilla name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'bukkit name'}, params: [{name: 'vanillaName', type: 'String', description: 'vanilla name'}]}, {name: 'getVanillaName', description: 'Gets the vanilla name of the item stack <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'vanilla name'}, params: [{name: 'item', type: 'ItemStack', description: 'item stack'}]}, {name: 'getVanillaName', description: 'Gets the vanilla name from the bukkit name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'vanilla name'}, params: [{name: 'bukkitName', type: 'String', description: 'bukkit name'}]}, {name: 'getVanillaName', description: 'Gets the vanilla name of the material and damage ID <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'vanilla name'}, params: [{name: 'type', type: 'Material', description: 'material'}, {name: 'damage', type: 'short', description: 'damage ID'}]}, {name: 'getVanillaName', description: 'Gets the vanilla name from the bukkit name and damage ID <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'vanilla name'}, params: [{name: 'bukkitName', type: 'String', description: 'bukkit name'}, {name: 'damage', type: 'short', description: 'damage ID'}]}, {name: 'getVanillaName', description: 'Gets the vanilla name of the material <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'vanilla name'}, params: [{name: 'type', type: 'Material', description: 'material'}]}], fields: [{name: 'ItemManager', description: 'Converts item names to/from vanilla names', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SplashPotion', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Spawns thrown splash potions that break upon hitting the ground', ext: 0, impl: [], constructors: [], methods: [{name: 'spawnPotion', description: 'Drops a splash potion at a target location <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ThrownPotion', description: 'the potion that was spawned'}, params: [{name: 'type', type: 'PotionType', description: 'potion type'}, {name: 'level', type: 'int', description: 'potion level'}, {name: 'extended', type: 'boolean', description: 'whether or not the potion has an extended duration'}, {name: 'loc', type: 'Location', description: 'target location'}]}, {name: 'spawnPotion', description: 'Spawns a splash potion from an entity <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ThrownPotion', description: 'the potion that was spawned'}, params: [{name: 'type', type: 'PotionType', description: 'potion type'}, {name: 'level', type: 'int', description: 'potion level'}, {name: 'extended', type: 'boolean', description: 'whether or not the potion has an extended duration'}, {name: 'source', type: 'LivingEntity', description: 'entity to spawn from'}]}], fields: [{name: 'SplashPotion', description: 'Spawns thrown splash potions that break upon hitting the ground', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'DebugManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Manager for debug messages at different levels</p> <p>You can leave in debug messages with this that players can use to help you find bugs without having to always have them active. Simply adding a config option and using that for the debugging level can remove any unwanted messages</p>', ext: 0, impl: [], constructors: [{name: 'DebugManager', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'JavaPlugin', description: ''}, {name: 'activeLevel', type: 'int', description: 'debugging message level'}]}], methods: [{name: 'info', description: 'Sends an info message <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'message', type: 'String', description: 'message to send'}, {name: 'level', type: 'int', description: 'debugging level of the message'}]}, {name: 'severe', description: 'Sends a severe message <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'message', type: 'String', description: 'message to send'}, {name: 'level', type: 'int', description: 'debugging level for the message'}]}, {name: 'warning', description: 'Sends a warning message <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'message', type: 'String', description: 'message to send'}, {name: 'level', type: 'int', description: 'debugging level for the message'}]}], fields: [{name: 'DebugManager', description: '<p>Manager for debug messages at different levels</p> <p>You can leave in debug messages with this that players can use to help you find bugs without having to always have them active. Simply adding a config option and using that for the debugging level can remove any unwanted messages</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'MobManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Contains tools for converting names of mobs', ext: 0, impl: [], constructors: [], methods: [{name: 'getDetailedName', description: 'Gets the vanilla entity name along with various attributes such as: <ul> <li>Baby</li> <li>Sheep Color</li> <li>Villager Profession</li> <li>Slime Size</li> <li>Wolf/Ocelot tamed status</li> <li>Zombie Type</li> </ul> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'detailed name'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to get the name of'}]}, {name: 'getName', description: 'Gets the simple name of a mob <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'basic name'}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to get the name of'}]}], fields: [{name: 'MobManager', description: 'Contains tools for converting names of mobs', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'PlayerUUIDs', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>This is a utility class for handling getting offline player IDs without having to slowly query the Minecraft servers. This is limited to only players who have played since MCCore has been installed, but that shouldn\'t be a problem since it only takes one login.</p> <p/> <p>The main usage of this class is the static methods.</p>', ext: 0, impl: ['Listener'], constructors: [{name: 'PlayerUUIDs', description: '<p>Sets up the listener to update player UUIDs</p> <p>This class should not be instantiated on older servers where UUIDs do not exist.</p> <p/> <p>MCCore sets this up by default so you should not instantiate this yourself.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'MCCore', description: 'plugin reference'}]}], methods: [{name: 'getName', description: '<p>Gets the name of a player via their UUID</p> <p>If the player hasn\'t played since MCCore was installed, this will return null</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'player name or null if not found'}, params: [{name: 'id', type: 'UUID', description: 'player UUID'}]}, {name: 'getOfflinePlayer', description: '<p>Gets an offline player by name</p> </p>If the player hasn\'t played since MCCore was installed, this returns null</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'OfflinePlayer', description: 'offline player or null if not found'}, params: [{name: 'name', type: 'String', description: 'name of the player'}]}, {name: 'getPlayer', description: '<p>Gets an offline player by name</p> </p>If the player is not online, this returns null</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'offline player or null if not found'}, params: [{name: 'name', type: 'String', description: 'name of the player'}]}, {name: 'getUUID', description: '<p>Gets the UUID of the player with the given name</p> <p>This is not case sensitive</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'UUID', description: 'UUID of the player or null if not found'}, params: [{name: 'name', type: 'String', description: 'name of the player'}]}, {name: 'onJoin', description: '<p>Updates the UUID of a player when they join</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerJoinEvent', description: 'event details'}]}, {name: 'save', description: '<p>Saves the UUID data to the config</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'PlayerUUIDs', description: '<p>This is a utility class for handling getting offline player IDs without having to slowly query the Minecraft servers. This is limited to only players who have played since MCCore has been installed, but that shouldn\'t be a problem since it only takes one login.</p> <p/> <p>The main usage of this class is the static methods.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Protection', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Provides checks for protection plugins', ext: 0, impl: [], constructors: [], methods: [{name: 'canAttack', description: 'Retrieves all living entities the entity can attack from the list <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<LivingEntity>', description: 'list of targets the player can attack'}, params: [{name: 'attacker', type: 'LivingEntity', description: 'entity that is attacking'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets the player is trying to attack'}]}, {name: 'canAttack', description: 'Checks whether or not an entity can be attacked by a player <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the target can be attacked, false otherwise'}, params: [{name: 'attacker', type: 'LivingEntity', description: 'player trying to attack'}, {name: 'target', type: 'LivingEntity', description: 'target of the attack'}, {name: 'passiveAlly', type: 'boolean', description: 'whether or not passive mobs are considered allies'}]}, {name: 'canAttack', description: 'Checks whether or not an entity can be attacked by a player <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the target can be attacked, false otherwise'}, params: [{name: 'attacker', type: 'LivingEntity', description: 'player trying to attack'}, {name: 'target', type: 'LivingEntity', description: 'target of the attack'}]}, {name: 'cannotAttack', description: 'Retrieves all living entities the entity cannot attack from the list <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<LivingEntity>', description: 'list of targets the player cannot attack'}, params: [{name: 'attacker', type: 'LivingEntity', description: 'entity that is attacking'}, {name: 'targets', type: 'List<LivingEntity>', description: 'targets the player is trying to attack'}]}, {name: 'isAlly', description: 'Checks if the target is an ally <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if ally, false otherwise'}, params: [{name: 'attacker', type: 'LivingEntity', description: 'entity attacking'}, {name: 'target', type: 'LivingEntity', description: 'ally of the player'}]}], fields: [{name: 'Protection', description: 'Provides checks for protection plugins', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TargetHelper', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Helper class for getting targets using various methods</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'getConeTargets', description: 'Gets the targets in a cone <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<LivingEntity>', description: 'list of targets'}, params: [{name: 'source', type: 'LivingEntity', description: 'entity to get the targets for'}, {name: 'arc', type: 'double', description: 'arc angle of the cone'}, {name: 'range', type: 'double', description: 'range of the cone'}]}, {name: 'getLivingTarget', description: '<p>Gets the entity the player is looking at</p> <p>Has a little bit of tolerance to make targeting easier</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity player is looking at or null if not found'}, params: [{name: 'source', type: 'LivingEntity', description: 'living entity to get the target of'}, {name: 'range', type: 'double', description: 'maximum range to check'}, {name: 'tolerance', type: 'double', description: 'tolerance of the line calculation'}]}, {name: 'getLivingTarget', description: '<p>Gets the entity the player is looking at</p> <p>Has a little bit of tolerance to make targeting easier</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'LivingEntity', description: 'entity player is looing at or null if not found'}, params: [{name: 'source', type: 'LivingEntity', description: 'living entity to get the target of'}, {name: 'range', type: 'double', description: 'maximum range to check'}]}, {name: 'getLivingTargets', description: '<p>Gets all entities the player is looking at within the range</p> <p>Has a little bit of tolerance to make targeting easier</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<LivingEntity>', description: 'all entities in the player\'s vision line'}, params: [{name: 'source', type: 'LivingEntity', description: 'living entity to get the targets of'}, {name: 'range', type: 'double', description: 'maximum range to check'}]}, {name: 'getLivingTargets', description: '<p>Gets all entities the player is looking at within the range using the given tolerance.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<LivingEntity>', description: 'all entities in the player\'s vision line'}, params: [{name: 'source', type: 'LivingEntity', description: 'living entity to get the targets of'}, {name: 'range', type: 'double', description: 'maximum range to check'}, {name: 'tolerance', type: 'double', description: 'tolerance of the line calculation'}]}, {name: 'getOpenLocation', description: 'Retrieves an open location along the line for teleporting or linear targeting <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: 'the farthest open location along the path'}, params: [{name: 'loc1', type: 'Location', description: 'start location of the path'}, {name: 'loc2', type: 'Location', description: 'end location of the path'}, {name: 'throughWall', type: 'boolean', description: 'whether or not going through walls is allowed'}]}, {name: 'isBehind', description: 'Checks if the target is behind the entity <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the target is behind the entity'}, params: [{name: 'entity', type: 'Entity', description: 'entity to check for'}, {name: 'target', type: 'Entity', description: 'target to check against'}]}, {name: 'isBehind', description: 'Checks if the entity is behind the player restricted to the given angle <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the target is behind the entity'}, params: [{name: 'entity', type: 'Entity', description: 'entity to check for'}, {name: 'target', type: 'Entity', description: 'target to check against'}, {name: 'angle', type: 'double', description: 'angle to restrict it to (0-360)'}]}, {name: 'isInFront', description: 'Checks if the entity is in front of the entity <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the target is in front of the entity'}, params: [{name: 'entity', type: 'Entity', description: 'entity to check for'}, {name: 'target', type: 'Entity', description: 'target to check against'}]}, {name: 'isInFront', description: 'Checks if the entity is in front of the entity restricted to the given angle <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the target is in front of the entity'}, params: [{name: 'entity', type: 'Entity', description: 'entity to check for'}, {name: 'target', type: 'Entity', description: 'target to check against'}, {name: 'angle', type: 'double', description: 'angle to restrict it to (0-360)'}]}, {name: 'isObstructed', description: 'Checks whether or not the line between the two points is obstructed <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'the location of obstruction or null if not obstructed'}, params: [{name: 'loc1', type: 'Location', description: 'first location'}, {name: 'loc2', type: 'Location', description: 'second location'}]}], fields: [{name: 'TargetHelper', description: '<p>Helper class for getting targets using various methods</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Particle', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A utility class for playing particle effects using reflection to allow for particles not normally supported by Bukkit.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'isSupported', description: 'Checks whether or not the reflection particles are supported for this server <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if supported, false otherwise'}, params: []}, {name: 'play', description: 'Sends a particle packet using the given string. This should only be used when you know what you are doing. Otherwise, use the other helper methods that provide valid particle strings and settings. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'particle', type: 'String', description: 'packet string of the particle'}, {name: 'loc', type: 'Location', description: 'location to play the particle at'}, {name: 'radius', type: 'int', description: 'radius in which to show the effect'}, {name: 'dx', type: 'float', description: 'particle x range'}, {name: 'dy', type: 'float', description: 'particle y range'}, {name: 'dz', type: 'float', description: 'particle z range'}, {name: 'speed', type: 'float', description: 'particle speed'}, {name: 'count', type: 'int', description: 'number of particles'}, {name: 'extra', type: 'int[]', description: 'extra data for 1.8+'}]}, {name: 'play', description: 'Sends a particle packet using the given string. This should only be used when you know what you are doing. Otherwise, use the other helper methods that provide valid particle strings and settings. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'particle', type: 'String', description: 'packet string of the particle'}, {name: 'loc', type: 'Location', description: 'location to play the particle at'}, {name: 'radius', type: 'int', description: 'radius in which to show the effect'}, {name: 'dx', type: 'float', description: 'particle x range'}, {name: 'dy', type: 'float', description: 'particle y range'}, {name: 'dz', type: 'float', description: 'particle z range'}, {name: 'speed', type: 'float', description: 'particle speed'}, {name: 'count', type: 'int', description: 'number of particles'}]}, {name: 'play', description: 'Sends the particle to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'particle', type: 'ParticleType', description: 'type of particle to play'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}]}, {name: 'play', description: 'Sends the particle to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'particle', type: 'ParticleType', description: 'type of particle to play'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}, {name: 'speed', type: 'float', description: 'speed of the particle'}]}, {name: 'playBlockCrack', description: 'Sends a block crack particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'Material', description: 'material to show the block crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the block crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}]}, {name: 'playBlockCrack', description: 'Sends a block crack particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'int', description: 'ID of the material to show the block crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the block crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}, {name: 'speed', type: 'float', description: 'speed of the particle'}]}, {name: 'playBlockCrack', description: 'Sends a block crack particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'Material', description: 'material to show the block crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the block crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}, {name: 'speed', type: 'float', description: 'speed of the particle'}]}, {name: 'playBlockCrack', description: 'Sends a block crack particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'int', description: 'ID of the material to show the block crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the block crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}]}, {name: 'playBlockDust', description: 'Sends a block dust particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'Material', description: 'material to show the icon crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the icon crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}]}, {name: 'playBlockDust', description: 'Sends a block dust particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'Material', description: 'material to show the icon crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the icon crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}, {name: 'speed', type: 'float', description: 'the speed of the particle'}]}, {name: 'playBlockDust', description: 'Sends a block dust particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'int', description: 'ID of the material to show the icon crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the icon crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}, {name: 'speed', type: 'float', description: 'speed of the particle'}]}, {name: 'playBlockDust', description: 'Sends a block dust particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'int', description: 'ID of the material to show the icon crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the icon crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}]}, {name: 'playIconCrack', description: 'Sends a icon crack particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'Material', description: 'material to show the icon crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the icon crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}, {name: 'speed', type: 'float', description: 'the speed of the particle'}]}, {name: 'playIconCrack', description: 'Sends a icon crack particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'Material', description: 'material to show the icon crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the icon crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}]}, {name: 'playIconCrack', description: 'Sends a icon crack particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'int', description: 'ID of the material to show the icon crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the icon crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}]}, {name: 'playIconCrack', description: 'Sends a icon crack particle for the material to all players within a radius of the location <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'mat', type: 'int', description: 'ID of the material to show the icon crack of'}, {name: 'data', type: 'short', description: 'data of the material to show the icon crack of'}, {name: 'loc', type: 'Location', description: 'location to play at'}, {name: 'radius', type: 'int', description: 'radius of the effect'}, {name: 'speed', type: 'float', description: 'speed of the particle'}]}], fields: [{name: 'CONVERSION', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'HashMap<String,String>', scope: 'public'}, {name: 'Particle', description: '<p>A utility class for playing particle effects using reflection to allow for particles not normally supported by Bukkit.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Reflection', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Utility class for performing reflection operations. Only use this class if you know what you\'re doing.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'getClass', description: 'Retrieves a class by name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Class<?>', description: 'class object or null if invalid'}, params: [{name: 'name', type: 'String', description: 'name of the class including packages'}]}, {name: 'getCraftClass', description: 'Retrieves a CraftBukkit class by name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Class<?>', description: 'class object or null if invalid'}, params: [{name: 'name', type: 'String', description: 'name of the class including packages'}]}, {name: 'getCraftPackage', description: 'Fetches the root package for CraftBukkit classes <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'fully qualified root package for CraftBukkit classes'}, params: []}, {name: 'getInstance', description: 'Gets an instance of the class <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'instance of the class or null if unable to create the object'}, params: [{name: 'c', type: 'Class<?>', description: 'class to get an instance of'}, {name: 'args', type: 'Object...', description: 'constructor arguments'}]}, {name: 'getMethod', description: 'Tries to get a method from the object <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Method', description: 'the value of the field or null if not found'}, params: [{name: 'o', type: 'Object', description: 'object reference'}, {name: 'methodName', type: 'String', description: 'name of the field to retrieve the value from'}, {name: 'params', type: 'Class<?>...', description: ''}]}, {name: 'getNMSClass', description: 'Retrieves an NMS class by name <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Class<?>', description: 'class object or null if invalid'}, params: [{name: 'name', type: 'String', description: 'name of the class including packages'}]}, {name: 'getNMSPackage', description: 'Fetches the package for NMS classes <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'fully qualified package for NMS classes'}, params: []}, {name: 'getValue', description: 'Tries to get a value from the object <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'the value of the field or null if not found'}, params: [{name: 'o', type: 'Object', description: 'object reference'}, {name: 'fieldName', type: 'String', description: 'name of the field to retrieve the value from'}]}, {name: 'init', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'sendPacket', description: 'Tries to send a packet to the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to send to'}, {name: 'packet', type: 'Object', description: 'packet to send'}]}, {name: 'sendPackets', description: 'Tries to send a packet to the player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'player to send to'}, {name: 'packets', type: 'List<Object>', description: 'list of packets to send'}]}, {name: 'setValue', description: 'Tries to set a value for the object <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'o', type: 'Object', description: 'object reference'}, {name: 'fieldName', type: 'String', description: 'name of the field to set'}, {name: 'value', type: 'Object', description: 'value to set'}]}], fields: [{name: 'Reflection', description: '<p>Utility class for performing reflection operations. Only use this class if you know what you\'re doing.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'BorderIterator', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'MCCore com.rit.sucy.region.BorderIterator <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 0, impl: ['Iterable<Location>', 'Iterator<Location>'], constructors: [{name: 'BorderIterator', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'region', type: 'Region', description: ''}, {name: 'xMin', type: 'int', description: ''}, {name: 'yMin', type: 'int', description: ''}, {name: 'zMin', type: 'int', description: ''}, {name: 'xMax', type: 'int', description: ''}, {name: 'yMax', type: 'int', description: ''}, {name: 'zMax', type: 'int', description: ''}]}], methods: [{name: 'hasNext', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'iterator', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Iterator<Location>', description: ''}, params: []}, {name: 'next', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: ''}, params: []}, {name: 'remove', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'BorderIterator', description: 'MCCore com.rit.sucy.region.BorderIterator <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Cuboid', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A cuboid that can be defined through coordinates, locations, or locations with dimensions', ext: 'Region', impl: [], constructors: [{name: 'Cuboid', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'point1', type: 'Location', description: 'first point'}, {name: 'point2', type: 'Location', description: 'second point'}]}, {name: 'Cuboid', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'point', type: 'Location', description: 'starting point'}, {name: 'width', type: 'int', description: 'x-coordinate size'}, {name: 'height', type: 'int', description: 'z-coordinate size'}, {name: 'depth', type: 'int', description: 'y-coordinate size'}]}, {name: 'Cuboid', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'world', type: 'World', description: 'region world'}, {name: 'x1', type: 'int', description: 'x-coordinate 1'}, {name: 'y1', type: 'int', description: 'y-coordinate 1'}, {name: 'z1', type: 'int', description: 'z-coordinate 1'}, {name: 'x2', type: 'int', description: 'x-coordinate 2'}, {name: 'y2', type: 'int', description: 'y-coordinate 2'}, {name: 'z2', type: 'int', description: 'z-coordinate 2'}]}], methods: [{name: 'contains', description: 'Checks if the cuboid is entirely contained within this cuboid <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if entirely contained, false otherwise'}, params: [{name: 'cuboid', type: 'Cuboid', description: 'cuboid to check'}]}, {name: 'contains', description: 'Checks if the player is contained within the cuboid <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if in the cuboid, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to check'}]}, {name: 'contains', description: 'Checks if the location is contained within the cuboid <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if in the cuboid, false otherwise'}, params: [{name: 'loc', type: 'Location', description: 'location to check'}]}, {name: 'contains', description: 'Checks if the coordinates are within the cuboid <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if in the cuboid, false otherwise'}, params: [{name: 'w', type: 'World', description: 'world'}, {name: 'x', type: 'int', description: 'x-position'}, {name: 'y', type: 'int', description: 'y-position'}, {name: 'z', type: 'int', description: 'z-position'}]}, {name: 'getBlocks', description: 'Retrieves a list of all blocks in the cuboid <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Block>', description: 'list of all blocks in the cuboid'}, params: []}, {name: 'getBorderIterator', description: '<p>Retrieves an iterator for the region\'s border locations.</p> <p>You can use a for each loop on this.</p> <code> for (Location loc : region.getBorderIterator()) { </code> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'BorderIterator', description: 'region border location iterator'}, params: []}, {name: 'getDepth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'depth of the cuboid (z-direction)'}, params: []}, {name: 'getHeight', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'height of the cuboid (y-direction)'}, params: []}, {name: 'getIterator', description: '<p>Retrieves an iterator for the region\'s locations.</p> <p>You can use a for each loop on this.</p> <code> for (Location loc : region.getIterator()) { </code> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'RegionIterator', description: 'region location iterator'}, params: []}, {name: 'getMaxLoc', description: 'Retrieves the maximum corner of the cuboid that does not change the region if modified <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: 'maximum location of the cuboid'}, params: []}, {name: 'getMinLoc', description: 'Retrieves the minimum corner of the cuboid that does not change the region if modified <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: 'minimum location of the cuboid'}, params: []}, {name: 'getRandomBlock', description: 'Gets a random block in the cuboid <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Block', description: 'random block'}, params: []}, {name: 'getVolume', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'volume of the cuboid'}, params: []}, {name: 'getWidth', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'width of the cuboid (x-direction)'}, params: []}, {name: 'intersects', description: 'Checks if the cuboid intersects this cuboid <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if intersects, false otherwise'}, params: [{name: 'cuboid', type: 'Cuboid', description: 'cuboid to check'}]}, {name: 'load', description: 'Loads the cuboid data from the config section <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Cuboid', description: 'loaded cuboid'}, params: [{name: 'config', type: 'ConfigurationSection', description: 'config section to load from'}]}, {name: 'save', description: 'Saves the cuboid data to the config section <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'ConfigurationSection', description: 'config section to save to'}]}], fields: [{name: 'Cuboid', description: 'A cuboid that can be defined through coordinates, locations, or locations with dimensions', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Region', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'Interface for regions', ext: 0, impl: [], constructors: [], methods: [{name: 'contains', description: 'Checks if the location is contained within the region <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'boolean', description: 'true if in the cuboid, false otherwise'}, params: [{name: 'loc', type: 'Location', description: 'location to check'}]}, {name: 'contains', description: 'Checks if the player is contained within the region <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'boolean', description: 'true if in the cuboid, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to check'}]}, {name: 'contains', description: 'Checks if the coordinates are within the region <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'boolean', description: 'true if in the cuboid, false otherwise'}, params: [{name: 'w', type: 'World', description: 'world'}, {name: 'x', type: 'int', description: 'x-position'}, {name: 'y', type: 'int', description: 'y-position'}, {name: 'z', type: 'int', description: 'z-position'}]}, {name: 'getBlocks', description: 'Retrieves a list of all blocks in the cuboid <br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'List<Block>', description: 'list of all blocks in the cuboid'}, params: []}, {name: 'getPlayers', description: 'Retrieves a list of all players in the cuboid <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Player>', description: 'list of all players in the cuboid'}, params: []}, {name: 'getVolume', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'int', description: 'volume of the cuboid'}, params: []}, {name: 'getWorld', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'World', description: 'world containing to the region'}, params: []}, {name: 'save', description: 'Saves the cuboid data to the config section <br><br', isStatic: 0, isFinal: 0, isAbstract: 1, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'ConfigurationSection', description: 'config section to save to'}]}], fields: [{name: 'Region', description: 'Interface for regions', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'world', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'World', scope: 'protected'}], scope: 'public'},
        {name: 'RegionIterator', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'MCCore com.rit.sucy.region.RegionIterator <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 0, impl: ['Iterable<Location>', 'Iterator<Location>'], constructors: [{name: 'RegionIterator', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'region', type: 'Region', description: ''}, {name: 'xMin', type: 'int', description: ''}, {name: 'yMin', type: 'int', description: ''}, {name: 'zMin', type: 'int', description: ''}, {name: 'xMax', type: 'int', description: ''}, {name: 'yMax', type: 'int', description: ''}, {name: 'zMax', type: 'int', description: ''}]}], methods: [{name: 'hasNext', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}, {name: 'iterator', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Iterator<Location>', description: ''}, params: []}, {name: 'next', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: ''}, params: []}, {name: 'remove', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'RegionIterator', description: 'MCCore com.rit.sucy.region.RegionIterator <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Sphere', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'MCCore com.rit.sucy.region.Sphere <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 'Region', impl: [], constructors: [{name: 'Sphere', description: 'Constructor from coordinates <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'world', type: 'World', description: 'world'}, {name: 'x', type: 'int', description: 'x-coordinate'}, {name: 'y', type: 'int', description: 'y-coordinate'}, {name: 'z', type: 'int', description: 'z-coordinate'}, {name: 'r', type: 'int', description: 'radius'}]}, {name: 'Sphere', description: 'Constructor from a location and radius <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'loc', type: 'Location', description: 'center point'}, {name: 'radius', type: 'int', description: 'radius'}]}], methods: [{name: 'contains', description: 'Checks if the player is contained within the sphere <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if contained in the sphere, false otherwise'}, params: [{name: 'player', type: 'Player', description: 'player to check'}]}, {name: 'contains', description: 'Checks if the location is contained within the sphere <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if contained, false otherwise'}, params: [{name: 'loc', type: 'Location', description: 'location to check'}]}, {name: 'contains', description: 'Checks if teh sphere is completely contained by this sphere <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if contained, false otherwise'}, params: [{name: 'sphere', type: 'Sphere', description: 'sphere to check'}]}, {name: 'contains', description: 'Checks if the point at the given coordinates is contained within the sphere <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'trueif contained, false otherwise'}, params: [{name: 'w', type: 'World', description: 'world'}, {name: 'x', type: 'int', description: 'x-position'}, {name: 'y', type: 'int', description: 'y-position'}, {name: 'z', type: 'int', description: 'z-position'}]}, {name: 'getBlocks', description: 'Gets all blocks contained within the sphere <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Block>', description: 'list of contained blocks'}, params: []}, {name: 'getCenter', description: 'Returns a center location that does not change the region if modified <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Location', description: 'center location'}, params: []}, {name: 'getRadius', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'sphere radius'}, params: []}, {name: 'getVolume', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'approximate volume of the sphere'}, params: []}, {name: 'intersects', description: 'Checks if the sphere is intersected by this sphere <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if intersects, false otherwise'}, params: [{name: 'sphere', type: 'Sphere', description: 'sphere to check'}]}, {name: 'load', description: 'Loads a sphere from the config <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Sphere', description: 'loaded sphere'}, params: [{name: 'config', type: 'ConfigurationSection', description: 'config section to load from'}]}, {name: 'save', description: 'Saves the sphere to a config section <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'ConfigurationSection', description: 'config section to save to'}]}], fields: [{name: 'Sphere', description: 'MCCore com.rit.sucy.region.Sphere <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Board', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 1, description: 'A manager for a scoreboard', ext: 0, impl: [], constructors: [{name: 'Board', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'title of the scoreboard'}, {name: 'plugin', type: 'String', description: 'plugin owning the scoreboard'}]}, {name: 'Board', description: 'Constructs a new scoreboard manager with a desired type <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'title for the scoreboard'}, {name: 'type', type: 'String', description: 'type of the scoreboard'}, {name: 'plugin', type: 'String', description: ''}]}], methods: [{name: 'clearDisplay', description: 'Clears the side board display', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'equals', description: 'Equates by name <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if titles are equal'}, params: [{name: 'other', type: 'Object', description: 'other board to equate to'}]}, {name: 'getName', description: 'Gets the name of the scoreboard <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'scoreboard name'}, params: []}, {name: 'hashCode', description: 'Hashes by name <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'name hash'}, params: []}, {name: 'init', description: 'Initializes reflection usage for boards <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'scoreboard', type: 'Scoreboard', description: 'BoardManager\'s scoreboard'}]}, {name: 'set', description: 'Sets a score to the scoreboard <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'void', description: ''}, params: [{name: 'label', type: 'String', description: 'label to use'}, {name: 'score', type: 'int', description: 'score to show'}]}, {name: 'setHealthLabel', description: 'Sets the health objective for the scoreboard - Recommended not to use this method - - Use PlayerBoard or BoardManager instead - <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'label', type: 'String', description: 'scoreboard label'}]}, {name: 'setPlayer', description: 'Sets the player for the board <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'Player', description: 'owning player'}]}, {name: 'showPlayer', description: 'Shows the board to it\'s player', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: ''}, params: []}], fields: [{name: 'Board', description: 'A manager for a scoreboard', isStatic: 0, isFinal: 0, isAbstract: 1, type: '', scope: 'public'}, {name: 'plugin', isStatic: 0, isFinal: 1, isAbstract: 0, type: 'String', scope: 'protected'}], scope: 'public'},
        {name: 'BoardListener', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Listener for players quitting', ext: 0, impl: ['Listener'], constructors: [{name: 'BoardListener', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}]}], methods: [{name: 'onJoin', description: 'Applies the empty scoreboard on join <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerJoinEvent', description: 'event details'}]}, {name: 'onKick', description: 'Clear data on kick <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerKickEvent', description: 'event details'}]}, {name: 'onQuit', description: 'Clear data on quit <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'PlayerQuitEvent', description: 'event details'}]}], fields: [{name: 'BoardListener', description: 'Listener for players quitting', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'BoardManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Main accessor for player scoreboards', ext: 0, impl: [], constructors: [], methods: [{name: 'addGlobalScoreboard', description: 'Gives the scoreboard to every player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'board', type: 'Board', description: 'scoreboard to add'}]}, {name: 'clearPlayer', description: 'Clears data for a player with a given name <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'player name'}]}, {name: 'clearPluginBoards', description: 'Clears a board for all players <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'String', description: 'plugin to clear'}]}, {name: 'clearScore', description: 'Clears the score for a player <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'String', description: 'player to clear for'}]}, {name: 'clearTeam', description: 'Clears the team for the player with the provided name <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'String', description: 'player name'}]}, {name: 'getAllPlayerBoards', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Collection<PlayerBoards>', description: 'collection of player data'}, params: []}, {name: 'getPlayerBoards', description: 'Retrieves scoreboard data for a player <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PlayerBoards', description: 'player\'s scoreboard data'}, params: [{name: 'player', type: 'String', description: 'player'}]}, {name: 'init', description: 'Initializes the scoreboard utility', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'registerTeam', description: '<p>Registers a new team with all player boards</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'team', type: 'Team', description: 'team to register'}]}, {name: 'setBelowNameScore', description: 'Sets the score for a player for below name text <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'String', description: 'player to set for'}, {name: 'score', type: 'int', description: 'score to set'}]}, {name: 'setGlobalHealthBar', description: 'Sets a label for a health bar under each player\'s name <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'label', type: 'String', description: 'label to set'}]}, {name: 'setTeam', description: '<p>Sets the team for a player</p> <p>If the team doesn\'t exist, it will be created with a prefix matching its name</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'player', type: 'String', description: 'player to set to the team'}, {name: 'team', type: 'String', description: 'team to add the player to'}]}, {name: 'setTextBelowNames', description: 'Sets the text below player names <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 't', type: 'String', description: 'text to show'}]}, {name: 'updateBoard', description: 'Updates a scoreboard with the text below the player\'s name, if any <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'board', type: 'Board', description: 'board to update'}]}, {name: 'updateTeam', description: 'Updates a team with all players <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'team', type: 'Team', description: 'team to update'}]}], fields: [{name: 'BoardManager', description: 'Main accessor for player scoreboards', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CycleCommand', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Makes a player\'s scoreboard start cycling', ext: 0, impl: ['ICommand'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'handler', type: 'CommandHandler', description: 'command handler'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'command arguments'}]}, {name: 'getArgsString', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'args string'}, params: []}, {name: 'getDescription', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'description'}, params: []}, {name: 'getPermissionNode', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'permission needed for this command'}, params: []}, {name: 'getSenderType', description: 'Sender required for the command', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SenderType', description: ''}, params: []}], fields: [{name: 'CycleCommand', description: 'Makes a player\'s scoreboard start cycling', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'CycleTask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Cycles through boards periodically', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'CycleTask', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}]}], methods: [{name: 'run', description: 'Cycles through scoreboards', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'CycleTask', description: 'Cycles through boards periodically', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ListCommand', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Displays a list of all active scoreboards for a player', ext: 0, impl: ['ICommand'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'handler', type: 'CommandHandler', description: 'command handler'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'command arguments'}]}, {name: 'getArgsString', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'arguments used by the command'}, params: []}, {name: 'getDescription', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'command description'}, params: []}, {name: 'getPermissionNode', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'permission required by the command'}, params: []}, {name: 'getSenderType', description: 'Sender required for the command', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SenderType', description: ''}, params: []}], fields: [{name: 'ListCommand', description: 'Displays a list of all active scoreboards for a player', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'PlayerBoards', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Scoreboard data for a player', ext: 0, impl: [], constructors: [{name: 'PlayerBoards', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'playerName', type: 'String', description: 'name of the player'}]}], methods: [{name: 'addBoard', description: 'Adds a scoreboard for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'board', type: 'Board', description: 'board to add'}]}, {name: 'getActiveBoard', description: 'Gets the active board for the player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Board', description: 'active board'}, params: []}, {name: 'getBoard', description: 'Retrieves a board manager <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Board', description: 'board manager'}, params: [{name: 'name', type: 'String', description: 'scoreboard name'}]}, {name: 'getBoards', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<Board>', description: 'the boards attached to the player'}, params: []}, {name: 'getPlayer', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'owning player reference'}, params: []}, {name: 'getPlayerName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the owning player'}, params: []}, {name: 'hasActiveBoard', description: 'Checks whether or not the player has an active scoreboard <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if has an active scoreboard, false otherwise'}, params: []}, {name: 'isCycling', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if cycling, false otherwise'}, params: []}, {name: 'isEnabled', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'removeBoard', description: 'Removes a board from a player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'board', type: 'Board', description: 'board to remove'}]}, {name: 'removeBoards', description: 'Removes all boards from a plugin <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'plugin', type: 'String', description: 'plugin name'}]}, {name: 'setHealthLabel', description: 'Sets the health label for this player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'label', type: 'String', description: 'health label'}]}, {name: 'showBoard', description: 'Shows a scoreboard for the player <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successful, false otherwise'}, params: [{name: 'name', type: 'String', description: 'name of the scoreboard'}]}, {name: 'showNextBoard', description: 'Shows the next scoreboard', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'startCycling', description: 'Makes the player\'s scoreboard cycle', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'stopCycling', description: 'Makes the player\'s scoreboard stop cycling', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'toggle', description: 'Toggles visibility of the scoreboard', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'cycling', description: 'Whether or not the player\'s scoreboard is cycling', isStatic: 0, isFinal: 0, isAbstract: 0, type: 'boolean', scope: 'protected'}, {name: 'PlayerBoards', description: 'Scoreboard data for a player', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ScoreboardCommander', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles commands for scoreboards', ext: 'CommandHandler', impl: [], constructors: [{name: 'ScoreboardCommander', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}]}], methods: [{name: 'displayUsage', description: 'Displays the usage for chat commands <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sender', type: 'CommandSender', description: 'sender of the command'}]}, {name: 'registerCommands', description: 'Registers commands', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'protected', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'ScoreboardCommander', description: 'Handles commands for scoreboards', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ShowCommand', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Shows a desired scoreboard for the player', ext: 0, impl: ['ICommand'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'handler', type: 'CommandHandler', description: 'command handler'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'command arguments'}]}, {name: 'getArgsString', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'args string'}, params: []}, {name: 'getDescription', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'description'}, params: []}, {name: 'getPermissionNode', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'permission needed for this command'}, params: []}, {name: 'getSenderType', description: 'Sender required for the command', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SenderType', description: ''}, params: []}], fields: [{name: 'ShowCommand', description: 'Shows a desired scoreboard for the player', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'StatBoard', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Stat board for displaying various statistics', ext: 'Board', impl: [], constructors: [{name: 'StatBoard', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'scoreboard title'}, {name: 'plugin', type: 'String', description: ''}]}], methods: [{name: 'addStats', description: 'Add stats to the scoreboard <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'holder', type: 'StatHolder', description: 'holder of the stats'}]}, {name: 'clearStats', description: 'Clears the stats from a stat holder <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'holder', type: 'StatHolder', description: 'stat holder'}]}, {name: 'update', description: 'Updates the stats for this scoreboard', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'StatBoard', description: 'Stat board for displaying various statistics', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'StopCommand', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Stops a player\'s scoreboard from cycling', ext: 0, impl: ['ICommand'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'handler', type: 'CommandHandler', description: 'command handler'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'command arguments'}]}, {name: 'getArgsString', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'args string'}, params: []}, {name: 'getDescription', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'description'}, params: []}, {name: 'getPermissionNode', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'permission needed for this command'}, params: []}, {name: 'getSenderType', description: 'Sender required for the command', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SenderType', description: ''}, params: []}], fields: [{name: 'StopCommand', description: 'Stops a player\'s scoreboard from cycling', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Team', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A team used by the Scoreboard Manager', ext: 0, impl: [], constructors: [{name: 'Team', description: '<p>Constructor with a team name, prefix and suffix</p> <p>A null prefix or suffix will mean the team doesn\'t have one</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: 'team name'}, {name: 'prefix', type: 'String', description: 'team prefix'}, {name: 'suffix', type: 'String', description: 'team suffix'}]}, {name: 'Team', description: '<p>Constructor with a team name</p>', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'name', type: 'String', description: ''}]}], methods: [{name: 'getId', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'ID assigned to the team'}, params: []}, {name: 'getName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the team name'}, params: []}, {name: 'getPrefix', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the team\'s prefix or null if none'}, params: []}, {name: 'getSuffix', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the team\'s suffix or null if none'}, params: []}, {name: 'setPrefix', description: '<p>Sets the prefix for the team</p> <p>Setting it to null will remove the prefix</p> <p>If the prefix is longer than 16 characters, it will be truncated down to 16 characters</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'prefix', type: 'String', description: 'new prefix'}]}, {name: 'setSuffix', description: '<p>Sets the suffix for the team</p> <p>Setting it to null will remove the suffix</p> <p>If the suffix is longer than 16 characters, it will be truncated down to 16 characters</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'suffix', type: 'String', description: 'new suffix'}]}], fields: [{name: 'Team', description: 'A team used by the Scoreboard Manager', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TextBoard', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages displaying messages via a scoreboard to a player', ext: 'Board', impl: [], constructors: [{name: 'TextBoard', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'scoreboard title'}, {name: 'plugin', type: 'String', description: ''}, {name: 'separateMessages', type: 'boolean', description: 'whether or not to add lines between messages'}]}], methods: [{name: 'addMessage', description: 'Adds a message to the scoreboard after smart-splitting it <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'message', type: 'String', description: 'message to add'}]}, {name: 'update', description: 'Updates the scoreboard', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'TextBoard', description: 'Manages displaying messages via a scoreboard to a player', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'ToggleCommand', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Toggles visibility of scoreboards', ext: 0, impl: ['ICommand'], constructors: [], methods: [{name: 'execute', description: 'Executes the command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'handler', type: 'CommandHandler', description: 'command handler'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'command arguments'}]}, {name: 'getArgsString', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'args string'}, params: []}, {name: 'getDescription', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'description'}, params: []}, {name: 'getPermissionNode', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'permission needed for this command'}, params: []}, {name: 'getSenderType', description: 'Sender required for the command', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SenderType', description: ''}, params: []}], fields: [{name: 'ToggleCommand', description: 'Toggles visibility of scoreboards', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'UpdateTask', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Updates stat boards periodically', ext: 'BukkitRunnable', impl: [], constructors: [{name: 'UpdateTask', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}]}], methods: [{name: 'run', description: 'Updates stat boards', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'UpdateTask', description: 'Updates stat boards periodically', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'SQLDatabase', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manager for connection to and interacting with a MySQL database', ext: 0, impl: [], constructors: [{name: 'SQLDatabase', description: '<p>Loads SQL database data from the configuration section.</p> <p>The format must be the following (not necessarily in the same order) for it to be recognized:</p> <code> host: example port: 12345 databse: someDatabase username: myUser password: myPassword </code> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'config', type: 'ConfigurationSection', description: 'configuration to loaf from'}]}, {name: 'SQLDatabase', description: 'Initializes the data to connect to a MySQL database <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'host', type: 'String', description: 'host name'}, {name: 'port', type: 'String', description: 'port number'}, {name: 'database', type: 'String', description: 'database name'}, {name: 'username', type: 'String', description: 'username'}, {name: 'password', type: 'String', description: 'password'}]}], methods: [{name: 'closeConnection', description: 'Closes the connection to the database', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'createTable', description: '<p>Creates a new table in the database.</p> <p>If the table already exists, that table will be returned instead.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SQLTable', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the table'}]}, {name: 'createTable', description: '<p>Creates a new table in the database for a specific plugin.</p> <p>If the table already exists, that table will be returned instead.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SQLTable', description: ''}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin to create it for'}, {name: 'name', type: 'String', description: 'name of the table'}]}, {name: 'deleteTable', description: '<p>Deletes a table from the database.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successful, false otherwise'}, params: [{name: 'name', type: 'String', description: 'name of the table to delete'}]}, {name: 'deleteTable', description: '<p>Deletes a table from the database for a plugin.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successful, false otherwise'}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin to delete the table for'}, {name: 'name', type: 'String', description: 'name of the table to delete'}]}, {name: 'getLogger', description: '<p>Gets the logger from the owning plugin.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Logger', description: 'logger of the owning plugin'}, params: []}, {name: 'getMeta', description: '<p>Retrieves the metadata of the connection.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'DatabaseMetaData', description: 'metadata of the active connection'}, params: []}, {name: 'getStatement', description: '<p>Retrieves an empty statement from the connection to use.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Statement', description: 'empty statement'}, params: []}, {name: 'getStatement', description: '<p>Prepares a statement for the connection.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'PreparedStatement', description: 'prepared statement or null if not connected or failed to prepare it'}, params: [{name: 'sql', type: 'String', description: 'SQL for the statement'}]}, {name: 'isConnected', description: '<p>Checks whether or not the MySQL setup is connected.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if connected, false otherwise'}, params: []}, {name: 'openConnection', description: 'Opens a connection to the server <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if connected successfully, false otherwise'}, params: []}, {name: 'tableExists', description: 'Checks if a table with the name exists for a plugin <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if exists, false otherwise'}, params: [{name: 'plugin', type: 'Plugin', description: 'plugin to check for'}, {name: 'name', type: 'String', description: 'table name'}]}, {name: 'tableExists', description: 'Checks if a table with the name exists <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if exists, false otherwise'}, params: [{name: 'name', type: 'String', description: 'table name'}]}], fields: [{name: 'SQLDatabase', description: 'Manager for connection to and interacting with a MySQL database', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SQLEntry', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Represents and individual entry in a MySQL table</p>', ext: 0, impl: [], constructors: [{name: 'SQLEntry', description: '<p>Initializes a new SQL entry</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'database', type: 'SQLDatabase', description: 'database containing the entry'}, {name: 'table', type: 'SQLTable', description: 'table containing the entry'}, {name: 'name', type: 'String', description: 'name of the entry'}]}], methods: [{name: 'getDate', description: '<p>Gets a date from the entry data.</p> <p>this returns null if an error occurred or there is no data set for the entry\'s value</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Date', description: 'date value'}, params: [{name: 'key', type: 'String', description: 'value key'}]}, {name: 'getDouble', description: '<p>Gets a double from the entry data.</p> <p>this returns -1 if an error occurred or there is no data set for the entry\'s value</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'double value'}, params: [{name: 'key', type: 'String', description: 'value key'}]}, {name: 'getFloat', description: '<p>Gets a float from the entry data.</p> <p>this returns -1 if an error occurred or there is no data set for the entry\'s value</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'float', description: 'float value'}, params: [{name: 'key', type: 'String', description: 'value key'}]}, {name: 'getInt', description: '<p>Gets a int from the entry data.</p> <p>this returns -1 if an error occurred or there is no data set for the entry\'s value</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'int value'}, params: [{name: 'key', type: 'String', description: 'value key'}]}, {name: 'getName', description: '<p>Retrieves the name of the entry.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'entry name'}, params: []}, {name: 'getString', description: '<p>Gets a string from the entry data.</p> <p>this returns null if an error occurred or there is no data set for the entry\'s value</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'string value'}, params: [{name: 'key', type: 'String', description: 'value key'}]}, {name: 'set', description: '<p>Sets a value for the entry.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the value'}, {name: 'value', type: 'float', description: 'value to set'}]}, {name: 'set', description: '<p>Sets a value for the entry.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the value'}, {name: 'value', type: 'Date', description: 'value to set'}]}, {name: 'set', description: '<p>Sets a collection of data to the entry.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'data', type: 'HashMap<String, Object>', description: 'data to set in the format (ColumnName, Value)'}]}, {name: 'set', description: '<p>Sets a value for the entry.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the value'}, {name: 'value', type: 'String', description: 'value to set'}]}, {name: 'set', description: '<p>Sets a value for the entry.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the value'}, {name: 'value', type: 'int', description: 'value to set'}]}, {name: 'set', description: '<p>Sets a value for the entry.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'key', type: 'String', description: 'key for the value'}, {name: 'value', type: 'double', description: 'value to set'}]}], fields: [{name: 'SQLEntry', description: '<p>Represents and individual entry in a MySQL table</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'T', description: '<p>Loads a set of data for an entry.</p> <p>This will instead return null if there was an error along the way.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '<TextendsISQLEntryData>', scope: 'public'}], scope: 'public'},
        {name: 'SQLTable', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Represents a single table in a MySQL database.</p> <p>If you close the MySQL connection, this will become invalid as it uses prepared statements from that connection. Get the tables each time you connect to the database rather than saving them.</p>', ext: 0, impl: [], constructors: [{name: 'SQLTable', description: '<p>Constructs a new table. This should only be called by SQLDatabase when it creates a new table or retrieves an already created one.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'sql', type: 'SQLDatabase', description: 'sql connection'}, {name: 'name', type: 'String', description: 'name of the table'}]}], methods: [{name: 'columnExists', description: '<p>Checks whether or not a column exists in the table.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if exists, false otherwise'}, params: [{name: 'name', type: 'String', description: 'name of the column'}]}, {name: 'createColumn', description: '<p>Creates a new column in the table.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'name of the column'}, {name: 'type', type: 'ColumnType', description: 'type of the column'}]}, {name: 'createEntry', description: '<p>Creates a new entry from the table.</p> <p>If the entry already exists, that will be returned instead.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SQLEntry', description: 'entry representation'}, params: [{name: 'name', type: 'String', description: 'name of the entry'}]}, {name: 'deleteEntry', description: '<p>Deletes an entry from the table.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if successful, false otherwise'}, params: [{name: 'name', type: 'String', description: 'entry name'}]}, {name: 'entryExists', description: 'Checks if an entry already exists <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if exists, false otherwise'}, params: [{name: 'name', type: 'String', description: 'entry name'}]}, {name: 'getName', description: '<p>Retrieves the name of the table.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'table name'}, params: []}, {name: 'query', description: 'Queries the MySQL table for a specific entry <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ResultSet', description: 'query results'}, params: [{name: 'name', type: 'String', description: 'entry name'}]}, {name: 'queryAll', description: 'Queries the MySQL table <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ResultSet', description: 'query results'}, params: []}], fields: [{name: 'List<T>', description: '<p>Loads the data from the table using the data class provided.</p> <p>This returns null an error occurred.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '<TextendsISQLEntryData>', scope: 'public'}, {name: 'SQLTable', description: '<p>Represents a single table in a MySQL database.</p> <p>If you close the MySQL connection, this will become invalid as it uses prepared statements from that connection. Get the tables each time you connect to the database rather than saving them.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'PageManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Handles displaying pages of options or details</p>', ext: 0, impl: [], constructors: [{name: 'PageManager', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'title for the display'}, {name: 'breakLines', type: 'boolean', description: 'whether or not to use break lines before and after the display'}, {name: 'lines', type: 'String...', description: 'lines to display'}]}, {name: 'PageManager', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'title for the display'}, {name: 'breakLines', type: 'boolean', description: 'whether or not to use break lines before and after the display'}, {name: 'lines', type: 'List<String>', description: 'lines to display'}]}, {name: 'PageManager', description: 'Constructor <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'title', type: 'String', description: 'title for the display'}, {name: 'breakLines', type: 'boolean', description: 'whether or not to use break lines before and after the display'}]}], methods: [{name: 'addLine', description: 'Adds a new line <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'line', type: 'String', description: 'line to add'}]}, {name: 'addLines', description: 'Adds multiple lines <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'lines', type: 'String...', description: 'lines to add'}]}, {name: 'addLines', description: 'Adds multiple lines <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'lines', type: 'List<String>', description: 'lines to add'}]}, {name: 'display', description: 'Displays the first page <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'recipient', type: 'CommandSender', description: 'receiver of the display'}]}, {name: 'display', description: 'Displays a specified page <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'recipient', type: 'CommandSender', description: 'receiver of the display'}, {name: 'page', type: 'int', description: 'page to display'}]}, {name: 'sortLines', description: 'Sorts the lines being displayed using the comparator <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'comparator', type: 'Comparator<String>', description: 'comparator to use'}]}, {name: 'sortLines', description: 'Sorts the lines being displayed', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}], fields: [{name: 'PageManager', description: '<p>Handles displaying pages of options or details</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TextFormatter', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Formats strings into various forms', ext: 0, impl: [], constructors: [], methods: [{name: 'colorString', description: 'Colors a string builder using & as the color indicator <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sb', type: 'StringBuilder', description: 'string builder to color'}]}, {name: 'colorString', description: 'Colors a string using the given color indicator <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'colored string'}, params: [{name: 'string', type: 'String', description: 'string to color'}, {name: 'token', type: 'char', description: 'color indicator'}]}, {name: 'colorString', description: 'Colors a string builder using the given color indicator <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'sb', type: 'StringBuilder', description: 'string builder to color'}, {name: 'token', type: 'char', description: 'color indicator'}]}, {name: 'colorString', description: 'Colors a string using & as the color indicator <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'colored string'}, params: [{name: 'string', type: 'String', description: 'string to color'}]}, {name: 'colorStringList', description: 'Colors a list of strings using & as the color indicator <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'colored string list'}, params: [{name: 'list', type: 'List<String>', description: 'string list'}]}, {name: 'colorStringList', description: 'Colors a list of strings with the given color indicator <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'colored string list'}, params: [{name: 'list', type: 'List<String>', description: 'string list'}, {name: 'token', type: 'char', description: 'color indicator'}]}, {name: 'format', description: 'Formats text into individual words (e.g. This Would Be A Result) <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'formatted string'}, params: [{name: 'string', type: 'String', description: 'string to format'}]}, {name: 'formatLowerCamel', description: 'Formats text into lower camel case form (e.g. thisWouldBeAResult <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'formatted string'}, params: [{name: 'string', type: 'String', description: 'string to be formatted'}]}, {name: 'formatNumber', description: 'Formats a decimal number <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'formatted number'}, params: [{name: 'number', type: 'double', description: 'number to format'}, {name: 'decimals', type: 'int', description: 'how many decimal places should be used'}, {name: 'commas', type: 'boolean', description: 'whether or not to add commas (e.g. 1,210,321)'}]}, {name: 'formatUpperCamel', description: 'Formats the string into upper camel case form (e.g. ThisWouldBeAResult) <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'formatted string'}, params: [{name: 'string', type: 'String', description: 'string to be formatted'}]}], fields: [{name: 'TextFormatter', description: 'Formats strings into various forms', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TextSizer', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Handles measuring the size of strings and squaring them up Units for sizes are based off of the space between characters (e.g. size 4 = the size of 4 of the spaces between characters)', ext: 0, impl: [], constructors: [], methods: [{name: 'createLine', description: 'Creates a line that is the maximum size allowed in the chat box using the given info <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'maximum size string line'}, params: [{name: 'begin', type: 'String', description: 'beginning string'}, {name: 'end', type: 'String', description: 'ending string'}, {name: 'fill', type: 'String', description: 'string to fill with'}]}, {name: 'createLine', description: 'Creates a line that is the maximum size allowed in the chat box using the given info <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'maximum size string line'}, params: [{name: 'begin', type: 'String', description: 'beginning string'}, {name: 'end', type: 'String', description: 'ending string'}, {name: 'fill', type: 'String', description: 'string to fill with'}, {name: 'fillColor', type: 'ChatColor', description: 'color to apply to the fill'}]}, {name: 'createLine', description: 'Creates a line that is the maximum size allowed in the chat box using the given info <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'line string'}, params: [{name: 'middle', type: 'String', description: 'middle string'}, {name: 'fill', type: 'String', description: 'string to fill the line with'}, {name: 'fillColor', type: 'ChatColor', description: ''}]}, {name: 'expand', description: 'Expands the messages so that they are all the same size Note: this adds a space to the end of the longest string to ensure it can square them all <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'list of expanded strings'}, params: [{name: 'messages', type: 'List<String>', description: 'messages to expand'}, {name: 'front', type: 'boolean', description: 'whether or not to add to the front'}]}, {name: 'expand', description: 'Expands a string to meet the desired size <br><br><br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the resulting message'}, params: [{name: 'message', type: 'String', description: 'message to expand'}, {name: 'size', type: 'int', description: 'desired size'}, {name: 'front', type: 'boolean', description: 'whether or not to add to the front of the string'}]}, {name: 'expandConsole', description: 'Expands a string to meet the desired size for the console <br><br><br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the resulting message'}, params: [{name: 'message', type: 'String', description: 'message to expand'}, {name: 'size', type: 'int', description: 'desired size'}, {name: 'front', type: 'boolean', description: 'whether or not to add to the front of the string'}]}, {name: 'measureString', description: 'Gets the size of the message <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'int', description: 'message size'}, params: [{name: 'message', type: 'String', description: 'message to measure'}]}, {name: 'split', description: '<p>Splits the list of messages into a number of columns equal to the number of alignments provided. Columns from left to right will have the provided alignments in order. The returned list contains the rows resulting from the arrangement.</p> <p/> <p>The vertical parameter refers to what order the messages are added to columns. If true, then messages will appear in the following pattern assuming 3 columns and 8 elements:</p> <p>0 3 6</p> <p>1 4 7</p> <p>2 5</p> <p>If set to false, the messages will appear in this pattern instead:</p> <p>0 1 2</p> <p>3 4 5</p> <p>6 7</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'the arranged message rows'}, params: [{name: 'messages', type: 'List<String>', description: 'messages to split into columns'}, {name: 'vertical', type: 'boolean', description: 'whether or not to apply messages vertically'}, {name: 'alignments', type: 'TextAlignment...', description: 'the alignments for each column'}]}, {name: 'split', description: 'Splits a string to fit within the given size, breaking it up by word <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'List<String>', description: 'resulting lines'}, params: [{name: 'message', type: 'String', description: 'message to split'}, {name: 'maxSize', type: 'int', description: 'maximum size of each line'}]}], fields: [{name: 'TextSizer', description: 'Handles measuring the size of strings and squaring them up Units for sizes are based off of the space between characters (e.g. size 4 = the size of 4 of the spaces between characters)', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TextSplitter', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manages text for scoreboards', ext: 0, impl: [], constructors: [], methods: [{name: 'getLines', description: 'Smart-splits messages to wrap for the scoreboard <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ArrayList<String>', description: 'lines of text'}, params: [{name: 'message', type: 'String', description: 'message to split'}, {name: 'maxLength', type: 'int', description: 'number of characters per line'}]}], fields: [{name: 'TextSplitter', description: 'Manages text for scoreboards', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'TypeChecker', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Checks strings if they match other primitive type formats', ext: 0, impl: [], constructors: [], methods: [{name: 'isBoolean', description: 'Checks if a string can be parsed as a boolean <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can be parsed as a boolean value, false otherwise'}, params: [{name: 'arg', type: 'String', description: 'string to check'}]}, {name: 'isDouble', description: 'Checks if a string can be parsed as a double <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can be parsed as a double, false otherwise'}, params: [{name: 'arg', type: 'String', description: 'string to check'}]}, {name: 'isInteger', description: 'Checks if a string can be parsed as an integer <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can be parsed as an integer, false otherwise'}, params: [{name: 'arg', type: 'String', description: 'string to check'}]}], fields: [{name: 'BOOL_REGEX', description: 'Regex string for matching boolean values', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'DOUBLE_REGEX', description: 'Regex string for matching double values', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'INT_REGEX', description: 'Regex string for matching integer values', isStatic: 1, isFinal: 1, isAbstract: 0, type: 'String', scope: 'public'}, {name: 'TypeChecker', description: 'Checks strings if they match other primitive type formats', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'VersionManager', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Manages compatibilities between different versions and provides ways to detect what version is currently active.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'damage', description: '<p>Damages an entity the given amount</p> <p>If the server version is 1.5.2 or earlier, this will convert the damage to an integer since those versions did not support double values for damage.</p> <p>This also ignores invincibility ticks so that the damage will go through regardless of whether or not the target has been recently damaged</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'target', type: 'LivingEntity', description: 'target to damage'}, {name: 'damage', type: 'double', description: 'damage to deal'}]}, {name: 'damage', description: '<p>Damages an entity the given amount while giving credit to a damager</p> <p>If the server version is 1.5.2 or earlier, this will convert the damage to an integer since those versions did not support double values for damage.</p> <p>This also ignores invincibility ticks so that the damage will go through regardless of whether or not the target has been recently damaged</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'target', type: 'LivingEntity', description: 'target to damage'}, {name: 'damager', type: 'LivingEntity', description: 'entity dealing the damage'}, {name: 'damage', type: 'double', description: 'damage to deal'}]}, {name: 'getOfflinePlayer', description: '<p>Retrieves an offline player by name trying to be efficient by version. If the player hasn\'t played since MCCore was installed and it is a newer server, then this will query the Minecraft server for the UUID which can cause lag. To avoid this, use getOfflinePlayer(name, false)</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'OfflinePlayer', description: 'the offline player'}, params: [{name: 'name', type: 'String', description: 'name of the player'}]}, {name: 'getOfflinePlayer', description: '<p>Retrieves an offline player by name while trying to be efficient by version.</p> <p>If querying is allowed, the server is at least 1.7.5, and the player has not played before, then this will query the Minecraft server for the UUID which can cause lag.</p> <p>If querying is not allowed, this will return null when the player has not played before and the server version is at least 1.7.5.</p> <p>If you want to allow querying but avoid lag, you should call this method on an asynchronous task so that it doesn\'t stall the main game loop.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'OfflinePlayer', description: 'offline player or null if unable to query the player data'}, params: [{name: 'name', type: 'String', description: 'name of the player'}, {name: 'allowQuery', type: 'boolean', description: 'whether or not to allow server queries'}]}, {name: 'getOnlinePlayers', description: 'Gets the list of online players, handling differences with the new 1.9 changes. <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player[]', description: 'array of online players'}, params: []}, {name: 'getPlayer', description: '<p>Retrieves a player by name, converting it to a UUID in case the server is at least version 1.7.5.</p> <p>If the player is not online, this will return null.</p> <p>This method doesn\'t require querying the Minecraft server as it uses the PlayerUUIDs class so it is very efficient for the later server versions.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'player or null if not online'}, params: [{name: 'name', type: 'String', description: 'name of the player'}]}, {name: 'getServerType', description: '<p>Retrieves the kind of server that is being run.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ServerType', description: 'the type of server that is running'}, params: []}, {name: 'heal', description: '<p>Heals the target entity the given amount</p> <p>If the server version is 1.5.2 or earlier, this will convert the heal amount to an integer since those versions did not support double values for health.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to heal'}, {name: 'amount', type: 'double', description: 'amount to heal'}]}, {name: 'initialize', description: '<p>Initializes the version data</p> <p>MCCore already calls this by default and this is called in case it wasn\'t called before data is started to be accessed so you shouldn\'t ever need to call this method.</p>', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'vs', type: 'String', description: ''}]}, {name: 'isDamageDouble', description: 'Checks whether or not damage dealt can be a double <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if can be a double, false otherwise'}, params: []}, {name: 'isTellRaw', description: 'Checks whether or not the tellraw command is active <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if active, false otherwise'}, params: []}, {name: 'isUUID', description: 'Checks whether or not UUIDs are used by the server <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if used, false otherwise'}, params: []}, {name: 'isVersionAtLeast', description: '<p>Checks whether or not the server\'s version is at least the provided version.</p> <p>You should be passing in one of the MIN constants from this class (eg. VersionManager.MC_1_7_2_MIN)</p> <p>Passing in MC_1_7_2_MIN would mean a server version of 1.7.2 or later</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the actual version is at most the provided one'}, params: [{name: 'v', type: 'int', description: 'version to check'}]}, {name: 'isVersionAtMost', description: '<p>Checks whether or not the server\'s version is at most the provided version.</p> <p>You should be passing in one of the MAX constants from this class (eg. VersionManager.MC_1_7_2_MAX)</p> <p>Passing in MC_1_7_2_MAX would mean a server version of 1.7.2 or earlier</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the actual version is at least the provided one'}, params: [{name: 'v', type: 'int', description: 'version to check'}]}, {name: 'setDamage', description: '<p>Sets the damage of the event to the given amount</p> <p>If the server version is 1.5.2 or earlier, this will convert the damage to an integer since those versions did not support double values for damage.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'event', type: 'EntityDamageEvent', description: 'event details'}, {name: 'damage', type: 'double', description: 'damage to set'}]}, {name: 'setMaxHealth', description: '<p>Sets the maximum health of an entity</p> <p>If the server version is 1.5.2 or earlier, this will convert the health amount to an integer since those versions did not support double values for health.</p> <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'entity', type: 'LivingEntity', description: 'entity to set the health for'}, {name: 'amount', type: 'double', description: 'amount to set the max health to'}]}], fields: [{name: 'MC_1_5_2_MAX', description: 'The build number for the last 1.5.2 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_5_2_MIN', description: 'The build number for the first 1.5.2 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_6_2_MAX', description: 'The build number for the last 1.6.2 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_6_2_MIN', description: 'The build number for the first 1.6.2 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_6_4_MAX', description: 'The build number for the last 1.6.4 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_6_4_MIN', description: 'The build number for the first 1.6.4 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_7_2_MAX', description: 'The build number for the last 1.7.2 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_7_2_MIN', description: 'The build number for the first 1.7.2 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_7_5_MAX', description: 'The build number for the last 1.7.5 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_7_5_MIN', description: 'The build number for the first 1.7.5 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_7_8_MAX', description: 'The build number for the last 1.7.8 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_7_8_MIN', description: 'The build number for the first 1.7.8 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'MC_1_7_9_MIN', description: 'The build number for the first 1.7.9 version <br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_5_2', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_6_2', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_6_4', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_7_2', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_7_5', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_7_8', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_7_9', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_8_0', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_8_3', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_8_8', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'V1_9_0', isStatic: 1, isFinal: 0, isAbstract: 0, type: 'int', scope: 'public'}, {name: 'VersionManager', description: '<p>Manages compatibilities between different versions and provides ways to detect what version is currently active.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'VersionPlayer', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A player implementation compatible across versions', ext: 0, impl: [], constructors: [{name: 'VersionPlayer', description: '<p>Represents the given player as a VersionPlayer, letting you save the player for different versions.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'OfflinePlayer', description: 'Bukkit player object'}]}, {name: 'VersionPlayer', description: '<p>Represents the given player as a VersionPlayer, letting you save the player for different versions.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'HumanEntity', description: 'Bukkit player entity object'}]}, {name: 'VersionPlayer', description: '<p>Represents the given player as a VersionPlayer, letting you save the player for different versions.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'player', type: 'Player', description: 'Bukkit player object'}]}, {name: 'VersionPlayer', description: '<p>Initializes a new VersionPlayer from a player\'s UUID</p> <p>You probably don\'t need to be using this constructor if you have the UUID of players.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'id', type: 'UUID', description: 'ID of the player'}]}, {name: 'VersionPlayer', description: '<p>Initializes a new VersionPlayer from a player\'s ID string</p> <p>The ID string could either be a UUID toString or a player\'s name. If the ID is a UUID, then it will simply be parsed and used to represent the player. If it is the player\'s name, it will be converted into a UUID if the server is at least on version 1.7.5 or remain the players name otherwise.</p> <p>If the ID is a player\'s name and they have not logged on since MCCore 1.16 or later has been installed, this will query the Minecraft servers for the player\'s UUID which can cause some lag if not done during the server\'s startup.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: '', description: ''}, params: [{name: 'id', type: 'Object', description: 'UUID or name of the player'}]}], methods: [{name: 'getId', description: '<p>Retrieves the appropriate ID for the player</p> <p>If the server is pre-1.7.5, this will return the player\'s name. Otherwise, this will return the player\'s UUID.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Object', description: 'player ID or name'}, params: []}, {name: 'getIdString', description: '<p>Retrieves the string version of the appropriate ID for the player</p> <p>If the server is pre-1.7.5, this will return the player\'s name. Otherwise, this will return the toString of the player\'s UUID.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'string representation of player\'s ID'}, params: []}, {name: 'getName', description: '<p>Retrieves the name of the current player.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the player'}, params: []}, {name: 'getOfflinePlayer', description: 'Gets the Bukkit offline player object for the represented player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'OfflinePlayer', description: 'Bukkit offline player object'}, params: []}, {name: 'getPlayer', description: 'Gets the Bukkit player object for the represented player <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'Bukkit player object'}, params: []}], fields: [{name: 'VersionPlayer', description: 'A player implementation compatible across versions', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'MCCore', type: 'class', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'General utility library for Bukkit plugins', ext: 'JavaPlugin', impl: [], constructors: [], methods: [{name: 'getCommandMessage', description: 'Retrieves the message to be shown when a command is on cooldown <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'command cooldown message'}, params: []}, {name: 'getConfig', description: '<p>Retrieves the configuration from a file for a plugin</p> <p>If the config file hasn\'t been loaded yet, this will load the file first.</p> <p>Configs retrieved via this method are handled by MCCore and automatically saved when MCCore disables.</p> <p>This should not be used for settings configs that admins may want to edit while the server is running as the auto save will overwrite any changes they make.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'ConfigurationSection', description: 'config for the file'}, params: [{name: 'plugin', type: 'JavaPlugin', description: ''}, {name: 'file', type: 'String', description: 'file name'}]}, {name: 'getConfigFile', description: '<p>Retrieves the configuration file for a plugin</p> <p>If the config file hasn\'t been loaded yet, this will load the file first.</p> <p>Configs retrieved via this method are handled by MCCore and automatically saved when MCCore disables.</p> <p>This should not be used for settings configs that admins may want to edit while the server is running as the auto save will overwrite any changes they make.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Config', description: 'config manager for the file'}, params: [{name: 'plugin', type: 'JavaPlugin', description: ''}, {name: 'file', type: 'String', description: 'file name'}]}, {name: 'getDurabilityMessage', description: '<p>Retrieves the message to be shown when an item\'s durability changes</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'durability message'}, params: []}, {name: 'getEconomy', description: 'Gets the active economy <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Economy', description: 'active economy'}, params: []}, {name: 'isChatEnabled', description: 'Checks whether or not MCCore\'s chat management is enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isDurabilityEnabled', description: 'Checks whether or not MCCore\'s durability events are enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isDurabilityMessageEnabled', description: '<p>Checks whether or not messages are to be displayed when the durability of an item  changes.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isEquipEventsEnabled', description: 'Checks whether or not MCCore\'s equip/unequip events are enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'isScoreboardsEnabled', description: 'Checks whether or not MCCore\'s scoreboard management is enabled <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if enabled, false otherwise'}, params: []}, {name: 'onDisable', description: 'Disables commands and listeners and saves applicable configs', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'onEnable', description: 'Sets up commands and listeners', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: []}, {name: 'registerConfig', description: '<p>Registers the Config with MCCore for auto saving.</p> <p>If the Config was already registered, this method will not do anything.</p> <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'Config', description: 'config to register'}]}], fields: [{name: 'MCCore', description: 'General utility library for Bukkit plugins', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ]
];
var INTERFACES = [
    [
    ],
    [
        {name: 'ICommand', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Interface for handlers for commands', ext: 0, impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes a command <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'handler', type: 'CommandHandler', description: 'command handler'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'command arguments'}]}, {name: 'getArgsString', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'args string (e.g. <playerName> <message>)'}, params: []}, {name: 'getDescription', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'command description (be very brief)'}, params: []}, {name: 'getPermissionNode', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'permission needed for this command'}, params: []}, {name: 'getSenderType', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'SenderType', description: 'type of sender required by the command'}, params: []}], fields: [{name: 'ICommand', description: 'Interface for handlers for commands', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'IFunction', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Interface for handlers for commands', ext: 0, impl: [], constructors: [], methods: [{name: 'execute', description: 'Executes a function <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'command', type: 'ConfigurableCommand', description: 'owning command'}, {name: 'plugin', type: 'Plugin', description: 'plugin reference'}, {name: 'sender', type: 'CommandSender', description: 'sender of the command'}, {name: 'args', type: 'String[]', description: 'command arguments'}]}], fields: [{name: 'IFunction', description: 'Interface for handlers for commands', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'LogFunction', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'MCCore com.rit.sucy.commands.LogFunction <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', ext: 0, impl: [], constructors: [], methods: [{name: 'execute', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'msg', type: 'String', description: ''}]}], fields: [{name: 'LogFunction', description: 'MCCore com.rit.sucy.commands.LogFunction <br><br>The MIT License (MIT) <br><br>Copyright (c) 2014 Steven Sucy <br><br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: <br><br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. <br><br>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'ISavable', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A savable object for automatic config saving', ext: 0, impl: [], constructors: [], methods: [{name: 'save', description: 'Saves the object to the config using the base path <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'config', type: 'ConfigurationSection', description: 'config to save to'}, {name: 'path', type: 'String', description: 'base path'}]}], fields: [{name: 'ISavable', description: 'A savable object for automatic config saving', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'Account', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A player account - personal or a bank account', ext: 0, impl: [], constructors: [], methods: [{name: 'deposit', description: '<br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of money left in the account'}, params: [{name: 'amount', type: 'double', description: 'adds money to the account'}]}, {name: 'getBalance', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'money in this account'}, params: []}, {name: 'getOwner', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Player', description: 'the player who owns the account'}, params: []}, {name: 'getOwnerName', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the player who owns the account'}, params: []}, {name: 'has', description: 'Checks if the account has at least the given amount <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the account has it, false otherwise'}, params: [{name: 'amount', type: 'double', description: 'amount'}]}, {name: 'setBalance', description: 'Sets the amount of money in the account <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'amount', type: 'double', description: 'new amount'}]}, {name: 'transfer', description: 'Transfers money into the target player account <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'remaining balance'}, params: [{name: 'account', type: 'Account', description: 'target account'}, {name: 'amount', type: 'double', description: 'amount to transfer'}]}, {name: 'withdraw', description: '<br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'amount of money left in the account'}, params: [{name: 'amount', type: 'double', description: 'withdraws money from the account'}]}], fields: [{name: 'Account', description: 'A player account - personal or a bank account', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Bank', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'A bank containing members and optionally having interest rates', ext: 'Account', impl: [], constructors: [], methods: [{name: 'createAccount', description: 'Creates a new member account for the bank <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Account', description: 'the new account'}, params: [{name: 'name', type: 'String', description: 'member name'}, {name: 'funds', type: 'double', description: 'initial funds'}]}, {name: 'getAccount', description: 'Gets an account of a member of the bank <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Account', description: 'member account'}, params: [{name: 'name', type: 'String', description: 'member name'}]}, {name: 'getDepositInterestRate', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'the rate of interest on deposits as a percentage'}, params: []}, {name: 'getLoanInterestRate', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'double', description: 'the rate of interest on loans as a percentage'}, params: []}, {name: 'hasAccount', description: 'Checks if the player is a member of the bank <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if a member, false otherwise'}, params: [{name: 'name', type: 'String', description: 'player name'}]}, {name: 'removeAccount', description: 'Removes an account from the bank <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Account', description: 'the removed account'}, params: [{name: 'name', type: 'String', description: 'account to delete'}, {name: 'absorb', type: 'boolean', description: 'whether or not to add the money to the bank'}]}, {name: 'setDepositInterestRate', description: 'Sets the interest on deposits for the bank <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'rate', type: 'double', description: 'new rate'}]}, {name: 'setLoanInterestRate', description: 'Sets the interest on loans for the bank <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'rate', type: 'double', description: 'new rate'}]}, {name: 'supportsInterest', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the bank supports interest, false otherwise'}, params: []}, {name: 'transferAccount', description: 'Transfers an account to the target bank <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Account', description: 'the transferred account'}, params: [{name: 'name', type: 'String', description: 'account name'}, {name: 'bank', type: 'Bank', description: 'bank to transfer to'}]}], fields: [{name: 'Bank', description: 'A bank containing members and optionally having interest rates', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'Economy', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Manager for accessing banks and player accounts', ext: 0, impl: [], constructors: [], methods: [{name: 'createAccount', description: 'Creates a new player account in a world <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Account', description: 'player account'}, params: [{name: 'name', type: 'String', description: 'player name'}, {name: 'world', type: 'String', description: 'world name'}, {name: 'funds', type: 'double', description: 'initial funds'}]}, {name: 'createAccount', description: 'Creates a new player account <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Account', description: 'player account'}, params: [{name: 'name', type: 'String', description: 'player name'}, {name: 'funds', type: 'double', description: 'initial funds'}]}, {name: 'createBank', description: 'Creates a new bank <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Bank', description: 'the bank'}, params: [{name: 'name', type: 'String', description: 'bank name'}, {name: 'funds', type: 'double', description: 'initial funds'}]}, {name: 'createBank', description: 'Creates a bank in a world <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Bank', description: 'the bank'}, params: [{name: 'name', type: 'String', description: 'bank name'}, {name: 'world', type: 'String', description: 'world name'}, {name: 'funds', type: 'double', description: 'initial funds'}]}, {name: 'deleteAccount', description: 'Deletes a player account <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'player name'}]}, {name: 'deleteAccount', description: 'Deletes a player account for a specific world <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'player name'}, {name: 'world', type: 'String', description: 'world name'}]}, {name: 'deleteBank', description: 'Deletes a bank <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'bank name'}]}, {name: 'deleteBank', description: 'Deletes a bank in a specific world <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'name', type: 'String', description: 'bank name'}, {name: 'world', type: 'String', description: 'world name'}]}, {name: 'format', description: 'Formats the money into a string <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'money string'}, params: [{name: 'money', type: 'double', description: 'money to format'}]}, {name: 'getAccount', description: 'Retrieves a player account for a specific world <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Account', description: 'player account'}, params: [{name: 'name', type: 'String', description: 'player name'}, {name: 'world', type: 'String', description: 'world name'}]}, {name: 'getAccount', description: 'Retrieves a player account <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Account', description: 'player account'}, params: [{name: 'name', type: 'String', description: 'player name'}]}, {name: 'getBank', description: 'Retrieves the bank with the given name <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Bank', description: 'the bank'}, params: [{name: 'name', type: 'String', description: 'bank name'}]}, {name: 'getBank', description: 'Retrieves a bank for a given world <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Bank', description: 'the bane'}, params: [{name: 'name', type: 'String', description: 'bank name'}, {name: 'world', type: 'String', description: 'world name'}]}, {name: 'getCurrencyPlural', description: 'Returns the currency name as a plural word <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'plural form of currency name'}, params: []}, {name: 'getCurrencySingular', description: 'Returns the currency name as a singular word <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'singular form of currency name'}, params: []}, {name: 'hasAccount', description: 'Checks if the player account exists in the given world <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if exists, false otherwise'}, params: [{name: 'name', type: 'String', description: 'player name'}, {name: 'world', type: 'String', description: 'world name'}]}, {name: 'hasAccount', description: 'Checks if the player account exists <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if exists, false otherwise'}, params: [{name: 'name', type: 'String', description: 'player name'}]}, {name: 'hasBank', description: 'Checks if the bank exists <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if exists, false otherwise'}, params: [{name: 'name', type: 'String', description: 'bank name'}]}, {name: 'hasBank', description: 'Checks if the bank exists in the given world <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if exists, false otherwise'}, params: [{name: 'name', type: 'String', description: 'bank name'}, {name: 'world', type: 'String', description: 'world name'}]}, {name: 'supportsBanks', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the economy supports banks, false otherwise'}, params: []}, {name: 'supportsMultiWorld', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'true if the economy supports multiple worlds, false otherwise'}, params: []}], fields: [{name: 'Economy', description: 'Manager for accessing banks and player accounts', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'EconomyPlugin', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Simple interface for retrieving an economy', ext: 0, impl: [], constructors: [], methods: [{name: 'getEconomy', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'Economy', description: 'the economy'}, params: []}], fields: [{name: 'EconomyPlugin', description: 'Simple interface for retrieving an economy', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'StatHolder', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Simple interface for providing stats for a scoreboard', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'StatHolder', description: 'Simple interface for providing stats for a scoreboard', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ISQLEntryData', type: 'interface', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>A container for the data from an SQL table entry.</p> <p>This is to be implemented by other plugins to match their data structures.</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'loadData', description: '<p>Loads the needed data from the result set.</p> <p>Get the values and don\'t store the result set anywhere as it will be closed to prevent leaks.</p> <br><br><br><br', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'void', description: ''}, params: [{name: 'set', type: 'ResultSet', description: 'set to load from'}]}], fields: [{name: 'ISQLEntryData', description: '<p>A container for the data from an SQL table entry.</p> <p>This is to be implemented by other plugins to match their data structures.</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ENUMS = [
    [
    ],
    [
        {name: 'SenderType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Type of sender that a command requires</p> <p>For use with CommandHandler and ICommand</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ANYONE', description: 'Anyone can send the command, player or console', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CONSOLE_ONLY', description: 'Only the console can use the command', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PLAYER_ONLY', description: 'Only players can use the command', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SenderType', description: '<p>Type of sender that a command requires</p> <p>For use with CommandHandler and ICommand</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'FilterType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Types of filters available for the language configuration</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ALL', description: '<p>Applies all available filters described above</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'COLOR', description: 'The string will be colored using \'&\' followed by a valid character to represent color codes.', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FilterType', description: '<p>Types of filters available for the language configuration</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'NONE', description: 'No filters are to be applied. The String will be returned as-is', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPECIAL', description: '<p>The string will look for special filters and replace them with the appropriate replacement. Special filters include:</p> <ul> <li>{expandFront(&lt;text&gt;,&lt;size&gt;,&lt;length&gt;)} - Expands the text to the desired size, appending whitespace in front of the text. This can be used to perfectly line up lines of text with each other when you size things to the same value. The \'size\' is the size for player displays whereas the \'length\' is the desired length of the string for the console. The two values are due to the console having a monotype font while in game is not one.</li> <li>{expandBack(&lt;text&gt;,&lt;size&gt;,&lt;length&gt;)} - The same as {expandFront(&lt;text&gt;,&lt;size&gt;,&lt;length&gt;)} except it places the whitespace after the text.</li> <li>{break} - Fills the remaining space on the line with dashes. To make it a solid line, preceed it with strike-through (&m).</li> </ul>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'ParticleType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'List of particle types usable in the reflection particle class', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ANGRY_VILLAGER', description: 'A cracked gray heart used when attacking a villager <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'BUBBLE', description: 'The bubble particle from swimming entities <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CLOUD', description: 'A white cloud that is used when a mob dies <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CRIT', description: 'A light brown cross used when performing critical hits or launching arrows <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DEATH_SUSPEND', description: 'A small gray square used near bedrock or in the void <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DRIP_LAVA', description: 'An orange drip used on blocks beneath lava <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DRIP_WATER', description: 'A blue drip used on blocks beneath water <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ENCHANTMENT_TABLE', description: 'A random white symbol used around enchanting tables <br/> Speed: the spread of the effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'EXPLODE', description: 'The smaller explosion effect of TNT and creepers <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FIREWORKS_SPARK', description: 'The particle used for white sparkling star trail of launched fireworks <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FLAME', description: 'A flame used with torches, active furnaces, magma cubes, and monster spawners <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FOOTSTEP', description: 'A transparent gray square not used in the game <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'HAPPY_VILLAGER', description: 'A green star used when trading with a villager <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'HEART', description: 'A red heart used when taming or breeding animals <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'HUGE_EXPLOSION', description: 'The larger explosion effect of TNT and creepers <br/> Speed: how large the particle is', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'INSTANT_SPELL', description: 'A white cross used when instant splash hits something <br/> Speed: how fast the particle moves horizontally', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LARGE_EXPLODE', description: 'The explosion effect of ghast fireballs and wither skulls <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LARGE_SMOKE', description: 'A large gray cloud used by fire, blazes, and furnace minecarts <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LAVA', description: 'A spark used near lava <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MAGIC_CRIT', description: 'A cyan star used when an enchanted weapon is used <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MOB_SPELL', description: 'A randomly colored swirl used with entities with active potion effects <br/> Speed: turns it black when speed is 0', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'MOB_SPELL_AMBIENT', description: 'A randomly colored transparent swirl used with beacon buffs <br/> Speed: turns it black when speed is 0', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'NOTE', description: 'A randomly colored note used with note blocks <br/> Speed: turns it green when speed is 0', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ParticleType', description: 'List of particle types usable in the reflection particle class', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'PORTAL', description: 'A purple cloud used with portals and ender entities <br/> Speed: the spread of the effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'RED_DUST', description: 'A randomly colored cloud used by redstone objects <br/> Speed: turns it red when speed is 0', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SLIME', description: 'A chunk of the slime ball icon used by slimes <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SNOW_SHOVEL', description: 'A small white cloud not used in the game <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SNOWBALL_POOF', description: 'A chunk of the snowball icon used when snowballs or eggs hit something <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPELL', description: 'A white swirl used when splash potions hit something <br/> Speed: how fast the particle moves horizontally', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPLASH', description: 'A blue drop used with swimming entities and rain <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'String', description: 'Retrieves the string used by the packet for the particle <br><br', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SUSPEND', description: 'A small blue square used by water <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TOWN_AURA', description: 'A small gray square used on mycelium <br/> Speed: no effect', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'WAKE', description: 'A blue drop used when fishing <br/> Speed: how fast the particle moves away', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'WITCH_MAGIC', description: 'A purple cross used with witch magic <br/> Speed: how fast the particle moves horizontally', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'ScoreboardNodes', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Permission nodes for scoreboard commands', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'CYCLE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LIST', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ScoreboardNodes', description: 'Permission nodes for scoreboard commands', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SHOW', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STOP', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'String', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TOGGLE', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
        {name: 'ColumnType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Types of columns supported', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'ColumnType', description: '<p>Retrieves a column type by name and size values.</p> <p>If no supported type matches the data, this will return null instead.</p> <br><br><br><br', isStatic: 1, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ColumnType', description: 'Types of columns supported', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DATE_TIME', description: '<p>A date/time value in the format YYYY-MM-DD HH:MM:SS</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'DOUBLE', description: '<p>A standard 8-byte double value</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'FLOAT', description: '<p>A standard 4-byte float value</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'INCREMENT', description: '<p>A integer increment to put a number ID on each entry</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'INT', description: 'A standard integer', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'LONG', description: 'A standard long', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'String', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STRING_128', description: '<p>A string that can be up to 128 characters long</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STRING_16', description: '<p>A string that can be up to 16 characters long</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STRING_255', description: '<p>A string that can be up to 256 characters long</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STRING_32', description: 'A string that can be up to 32 characters long', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'STRING_64', description: '<p>A string that can be up to 64 characters long</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TEXT', description: '<p>A string that can be up to 65535 characters long</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'TextAlignment', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: 'Alignments supported by the text sizer', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'LEFT', description: 'Text aligned to the left', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'RIGHT', description: 'Text aligned to the right', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'TextAlignment', description: 'Alignments supported by the text sizer', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
        {name: 'ServerType', type: 'enum', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>The different types of servers supported by MCCore</p>', ext: 0, impl: [], constructors: [], methods: [], fields: [{name: 'BUKKIT', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'CAULDRON', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'ServerType', description: '<p>The different types of servers supported by MCCore</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'SPIGOT', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}, {name: 'UNKNOWN', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ]
];
var EXCEPTIONS = [
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ANNOTATIONS = [
    [
    ],
    [
    ],
    [
    ],
    [
        {name: 'ExcludeField', type: 'annotation', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Annotation for fields during serialization</p> <p>Flags allow for controlled exclusion in case of multiple save formats or different levels of quality</p> <p>The default flag includes all flags</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'flag', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'name of the flag to exclude from serialization'}, params: []}], fields: [{name: 'ExcludeField', description: '<p>Annotation for fields during serialization</p> <p>Flags allow for controlled exclusion in case of multiple save formats or different levels of quality</p> <p>The default flag includes all flags</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'},
        {name: 'SerializableField', type: 'annotation', isStatic: 0, isFinal: 0, isAbstract: 0, description: '<p>Annotation for fields during serialization to ask for further traversal</p> <p>Including this annotation makes the serializer attempt to serialize the field instead of just saving its toString value.</p> <p>The flags provide a way to switch between the toString and full serialization in case of multiple file types</p> <p>The list attribute allows you to serialize the objects contained within collections such as lists or hash sets</p> <p>The map attribute allows you to serialize the objects within hash maps if they are the values (e.g. HashMap<string, MyObject>)</p>', ext: 0, impl: [], constructors: [], methods: [{name: 'flag', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'String', description: 'the flag in which this field is serializable'}, params: []}, {name: 'list', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not this field is a list'}, params: []}, {name: 'map', isStatic: 0, isFinal: 0, isAbstract: 0, scope: 'public', returnValue: {type: 'boolean', description: 'whether or not this field is a map'}, params: []}], fields: [{name: 'SerializableField', description: '<p>Annotation for fields during serialization to ask for further traversal</p> <p>Including this annotation makes the serializer attempt to serialize the field instead of just saving its toString value.</p> <p>The flags provide a way to switch between the toString and full serialization in case of multiple file types</p> <p>The list attribute allows you to serialize the objects contained within collections such as lists or hash sets</p> <p>The map attribute allows you to serialize the objects within hash maps if they are the values (e.g. HashMap<string, MyObject>)</p>', isStatic: 0, isFinal: 0, isAbstract: 0, type: '', scope: 'public'}], scope: 'public'}    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ],
    [
    ]
];
var ALL_CLASSES = ['com.rit.sucy.economy:Account', 'com.rit.sucy.economy:Bank', 'com.rit.sucy.scoreboard:Board', 'com.rit.sucy.scoreboard:BoardListener', 'com.rit.sucy.scoreboard:BoardManager', 'com.rit.sucy.region:BorderIterator', 'com.rit.sucy.chat:Chat', 'com.rit.sucy.chat:ChatCommander', 'com.rit.sucy.chat:ChatData', 'com.rit.sucy.chat:ChatListener', 'com.rit.sucy.chat:ChatNodes', 'com.rit.sucy.sql:ColumnType', 'com.rit.sucy.commands:CommandHandler', 'com.rit.sucy.commands:CommandListener', 'com.rit.sucy.commands:CommandLog', 'com.rit.sucy.commands:CommandManager', 'com.rit.sucy.config:CommentedConfig', 'com.rit.sucy.config:CommentedLanguageConfig', 'com.rit.sucy.config:Config', 'com.rit.sucy.config:ConfigSerializer', 'com.rit.sucy.commands:ConfigurableCommand', 'com.rit.sucy.region:Cuboid', 'com.rit.sucy.config:CustomFilter', 'com.rit.sucy.scoreboard:CycleCommand', 'com.rit.sucy.scoreboard:CycleTask', 'com.rit.sucy.config.parse:DataArray', 'com.rit.sucy.config:DataFile', 'com.rit.sucy.config.parse:DataSection', 'com.rit.sucy.log:DebugManager', 'com.rit.sucy.items:Durability', 'com.rit.sucy.items:DurabilityListener', 'com.rit.sucy.economy:Economy', 'com.rit.sucy.economy:EconomyPlugin', 'com.rit.sucy.enchant:Enchants', 'com.rit.sucy.event:EquipListener', 'com.rit.sucy.config:ExcludeField', 'com.rit.sucy.config:Filter', 'com.rit.sucy.config:FilterType', 'com.rit.sucy.commands:ICommand', 'com.rit.sucy.commands:IFunction', 'com.rit.sucy.items:InventoryManager', 'com.rit.sucy.items:InventorySerializer', 'com.rit.sucy.config:ISavable', 'com.rit.sucy.sql.direct:ISQLEntryData', 'com.rit.sucy.event:ItemGainDurabilityEvent', 'com.rit.sucy.event:ItemLoseDurabilityEvent', 'com.rit.sucy.items:ItemManager', 'com.rit.sucy.config.parse:JSONParser', 'com.rit.sucy.config:LanguageConfig', 'com.rit.sucy.chat:ListCommand', 'com.rit.sucy.scoreboard:ListCommand', 'com.rit.sucy.config:LocationData', 'com.rit.sucy.commands:LogFunction', 'com.rit.sucy.gui:MapBuffer', 'com.rit.sucy.gui:MapData', 'com.rit.sucy.gui:MapFont', 'com.rit.sucy.gui:MapImage', 'com.rit.sucy.gui:MapImageManager', 'com.rit.sucy.gui:MapListener', 'com.rit.sucy.gui:MapMenu', 'com.rit.sucy.gui:MapMenuManager', 'com.rit.sucy.gui:MapObject', 'com.rit.sucy.gui:MapScene', 'com.rit.sucy.gui:MapScheme', 'com.rit.sucy.gui:MapString', 'com.rit.sucy:MCCore', 'com.rit.sucy.mobs:MobManager', 'com.rit.sucy.chat:NameCommand', 'com.rit.sucy.config.parse:NumberParser', 'com.rit.sucy.text:PageManager', 'com.rit.sucy.reflect:Particle', 'com.rit.sucy.reflect:ParticleType', 'com.rit.sucy.scoreboard:PlayerBoards', 'com.rit.sucy.event:PlayerEquipEvent', 'com.rit.sucy.event:PlayerMoneyChangedEvent', 'com.rit.sucy.event:PlayerUnequipEvent', 'com.rit.sucy.player:PlayerUUIDs', 'com.rit.sucy.chat:Prefix', 'com.rit.sucy.chat:PrefixCommand', 'com.rit.sucy.player:Protection', 'com.rit.sucy.reflect:Reflection', 'com.rit.sucy.region:Region', 'com.rit.sucy.region:RegionIterator', 'com.rit.sucy.chat:ResetCommand', 'com.rit.sucy.config:Resources', 'com.rit.sucy.scoreboard:ScoreboardCommander', 'com.rit.sucy.scoreboard:ScoreboardNodes', 'com.rit.sucy.commands:SenderType', 'com.rit.sucy.config:SerializableField', 'com.rit.sucy.version:ServerType', 'com.rit.sucy.scoreboard:ShowCommand', 'com.rit.sucy.region:Sphere', 'com.rit.sucy.items:SplashPotion', 'com.rit.sucy.sql.direct:SQLDatabase', 'com.rit.sucy.sql.direct:SQLEntry', 'com.rit.sucy.sql.direct:SQLTable', 'com.rit.sucy.scoreboard:StatBoard', 'com.rit.sucy.scoreboard:StatHolder', 'com.rit.sucy.scoreboard:StopCommand', 'com.rit.sucy.player:TargetHelper', 'com.rit.sucy.scoreboard:Team', 'com.rit.sucy.text:TextAlignment', 'com.rit.sucy.scoreboard:TextBoard', 'com.rit.sucy.text:TextFormatter', 'com.rit.sucy.text:TextSizer', 'com.rit.sucy.text:TextSplitter', 'com.rit.sucy.scoreboard:ToggleCommand', 'com.rit.sucy.text:TypeChecker', 'com.rit.sucy.scoreboard:UpdateTask', 'com.rit.sucy.version:VersionManager', 'com.rit.sucy.version:VersionPlayer', 'com.rit.sucy.config.parse:YAMLParser'];
